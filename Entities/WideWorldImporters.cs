// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Entities
{
    #region Database context interface

    public interface IWideWorldImportersDbContext : IDisposable
    {
        DbSet<Application_City> Application_Cities { get; set; } // Cities
        DbSet<Application_Country> Application_Countries { get; set; } // Countries
        DbSet<Application_DeliveryMethod> Application_DeliveryMethods { get; set; } // DeliveryMethods
        DbSet<Application_PaymentMethod> Application_PaymentMethods { get; set; } // PaymentMethods
        DbSet<Application_Person> Application_People { get; set; } // People
        DbSet<Application_StateProvince> Application_StateProvinces { get; set; } // StateProvinces
        DbSet<Application_SystemParameter> Application_SystemParameters { get; set; } // SystemParameters
        DbSet<Application_TransactionType> Application_TransactionTypes { get; set; } // TransactionTypes
        DbSet<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders { get; set; } // PurchaseOrders
        DbSet<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines
        DbSet<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers
        DbSet<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories
        DbSet<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions
        DbSet<Sales_BuyingGroup> Sales_BuyingGroups { get; set; } // BuyingGroups
        DbSet<Sales_Customer> Sales_Customers { get; set; } // Customers
        DbSet<Sales_CustomerCategory> Sales_CustomerCategories { get; set; } // CustomerCategories
        DbSet<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions
        DbSet<Sales_Invoice> Sales_Invoices { get; set; } // Invoices
        DbSet<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines
        DbSet<Sales_Order> Sales_Orders { get; set; } // Orders
        DbSet<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines
        DbSet<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals
        DbSet<Warehouse_ColdRoomTemperature> Warehouse_ColdRoomTemperatures { get; set; } // ColdRoomTemperatures
        DbSet<Warehouse_Color> Warehouse_Colors { get; set; } // Colors
        DbSet<Warehouse_PackageType> Warehouse_PackageTypes { get; set; } // PackageTypes
        DbSet<Warehouse_StockGroup> Warehouse_StockGroups { get; set; } // StockGroups
        DbSet<Warehouse_StockItem> Warehouse_StockItems { get; set; } // StockItems
        DbSet<Warehouse_StockItemHolding> Warehouse_StockItemHoldings { get; set; } // StockItemHoldings
        DbSet<Warehouse_StockItemStockGroup> Warehouse_StockItemStockGroups { get; set; } // StockItemStockGroups
        DbSet<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions
        DbSet<Warehouse_VehicleTemperature> Warehouse_VehicleTemperatures { get; set; } // VehicleTemperatures

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    public class WideWorldImportersDbContext : DbContext, IWideWorldImportersDbContext
    {
        public WideWorldImportersDbContext()
        {
        }

        public WideWorldImportersDbContext(DbContextOptions<WideWorldImportersDbContext> options)
            : base(options)
        {
        }

        public DbSet<Application_City> Application_Cities { get; set; } // Cities
        public DbSet<Application_Country> Application_Countries { get; set; } // Countries
        public DbSet<Application_DeliveryMethod> Application_DeliveryMethods { get; set; } // DeliveryMethods
        public DbSet<Application_PaymentMethod> Application_PaymentMethods { get; set; } // PaymentMethods
        public DbSet<Application_Person> Application_People { get; set; } // People
        public DbSet<Application_StateProvince> Application_StateProvinces { get; set; } // StateProvinces
        public DbSet<Application_SystemParameter> Application_SystemParameters { get; set; } // SystemParameters
        public DbSet<Application_TransactionType> Application_TransactionTypes { get; set; } // TransactionTypes
        public DbSet<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders { get; set; } // PurchaseOrders
        public DbSet<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines
        public DbSet<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers
        public DbSet<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories
        public DbSet<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions
        public DbSet<Sales_BuyingGroup> Sales_BuyingGroups { get; set; } // BuyingGroups
        public DbSet<Sales_Customer> Sales_Customers { get; set; } // Customers
        public DbSet<Sales_CustomerCategory> Sales_CustomerCategories { get; set; } // CustomerCategories
        public DbSet<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions
        public DbSet<Sales_Invoice> Sales_Invoices { get; set; } // Invoices
        public DbSet<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines
        public DbSet<Sales_Order> Sales_Orders { get; set; } // Orders
        public DbSet<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines
        public DbSet<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals
        public DbSet<Warehouse_ColdRoomTemperature> Warehouse_ColdRoomTemperatures { get; set; } // ColdRoomTemperatures
        public DbSet<Warehouse_Color> Warehouse_Colors { get; set; } // Colors
        public DbSet<Warehouse_PackageType> Warehouse_PackageTypes { get; set; } // PackageTypes
        public DbSet<Warehouse_StockGroup> Warehouse_StockGroups { get; set; } // StockGroups
        public DbSet<Warehouse_StockItem> Warehouse_StockItems { get; set; } // StockItems
        public DbSet<Warehouse_StockItemHolding> Warehouse_StockItemHoldings { get; set; } // StockItemHoldings
        public DbSet<Warehouse_StockItemStockGroup> Warehouse_StockItemStockGroups { get; set; } // StockItemStockGroups
        public DbSet<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions
        public DbSet<Warehouse_VehicleTemperature> Warehouse_VehicleTemperatures { get; set; } // VehicleTemperatures

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"server=(local); database=WideWorldImporters; Integrated Security=true");

                ILogger logger = LogManager.GetCurrentClassLogger();
                optionsBuilder.LogTo(logger.Debug);
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.HasSequence<int>("BuyingGroupID", "Sequences").StartsAt(3).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CityID", "Sequences").StartsAt(38187).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("ColorID", "Sequences").StartsAt(37).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CountryID", "Sequences").StartsAt(242).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CustomerCategoryID", "Sequences").StartsAt(9).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("CustomerID", "Sequences").StartsAt(1062).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("DeliveryMethodID", "Sequences").StartsAt(11).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("InvoiceID", "Sequences").StartsAt(70511).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("InvoiceLineID", "Sequences").StartsAt(228266).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("OrderID", "Sequences").StartsAt(73596).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("OrderLineID", "Sequences").StartsAt(231413).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PackageTypeID", "Sequences").StartsAt(15).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PaymentMethodID", "Sequences").StartsAt(5).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PersonID", "Sequences").StartsAt(3262).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PurchaseOrderID", "Sequences").StartsAt(2075).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("PurchaseOrderLineID", "Sequences").StartsAt(8368).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SpecialDealID", "Sequences").StartsAt(3).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StateProvinceID", "Sequences").StartsAt(54).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StockGroupID", "Sequences").StartsAt(11).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StockItemID", "Sequences").StartsAt(228).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("StockItemStockGroupID", "Sequences").StartsAt(443).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SupplierCategoryID", "Sequences").StartsAt(10).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SupplierID", "Sequences").StartsAt(14).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("SystemParameterID", "Sequences").StartsAt(2).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("TransactionID", "Sequences").StartsAt(336253).IncrementsBy(1).IsCyclic(false);
            modelBuilder.HasSequence<int>("TransactionTypeID", "Sequences").StartsAt(14).IncrementsBy(1).IsCyclic(false);

            modelBuilder.ApplyConfiguration(new Application_CityConfiguration());
            modelBuilder.ApplyConfiguration(new Application_CountryConfiguration());
            modelBuilder.ApplyConfiguration(new Application_DeliveryMethodConfiguration());
            modelBuilder.ApplyConfiguration(new Application_PaymentMethodConfiguration());
            modelBuilder.ApplyConfiguration(new Application_PersonConfiguration());
            modelBuilder.ApplyConfiguration(new Application_StateProvinceConfiguration());
            modelBuilder.ApplyConfiguration(new Application_SystemParameterConfiguration());
            modelBuilder.ApplyConfiguration(new Application_TransactionTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_PurchaseOrderConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_PurchaseOrderLineConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_SupplierConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_SupplierCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new Purchasing_SupplierTransactionConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_BuyingGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_CustomerCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_CustomerTransactionConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_InvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_InvoiceLineConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_OrderConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_OrderLineConfiguration());
            modelBuilder.ApplyConfiguration(new Sales_SpecialDealConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_ColdRoomTemperatureConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_ColorConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_PackageTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_StockGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_StockItemConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_StockItemHoldingConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_StockItemStockGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_StockItemTransactionConfiguration());
            modelBuilder.ApplyConfiguration(new Warehouse_VehicleTemperatureConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class WideWorldImportersDbContextFactory : IDesignTimeDbContextFactory<WideWorldImportersDbContext>
    {
        public WideWorldImportersDbContext CreateDbContext(string[] args)
        {
            return new WideWorldImportersDbContext();
        }
    }

    #endregion

    #region Fake Database context

    public class FakeWideWorldImportersDbContext : IWideWorldImportersDbContext
    {
        public DbSet<Application_City> Application_Cities { get; set; } // Cities
        public DbSet<Application_Country> Application_Countries { get; set; } // Countries
        public DbSet<Application_DeliveryMethod> Application_DeliveryMethods { get; set; } // DeliveryMethods
        public DbSet<Application_PaymentMethod> Application_PaymentMethods { get; set; } // PaymentMethods
        public DbSet<Application_Person> Application_People { get; set; } // People
        public DbSet<Application_StateProvince> Application_StateProvinces { get; set; } // StateProvinces
        public DbSet<Application_SystemParameter> Application_SystemParameters { get; set; } // SystemParameters
        public DbSet<Application_TransactionType> Application_TransactionTypes { get; set; } // TransactionTypes
        public DbSet<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders { get; set; } // PurchaseOrders
        public DbSet<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines
        public DbSet<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers
        public DbSet<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories
        public DbSet<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions
        public DbSet<Sales_BuyingGroup> Sales_BuyingGroups { get; set; } // BuyingGroups
        public DbSet<Sales_Customer> Sales_Customers { get; set; } // Customers
        public DbSet<Sales_CustomerCategory> Sales_CustomerCategories { get; set; } // CustomerCategories
        public DbSet<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions
        public DbSet<Sales_Invoice> Sales_Invoices { get; set; } // Invoices
        public DbSet<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines
        public DbSet<Sales_Order> Sales_Orders { get; set; } // Orders
        public DbSet<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines
        public DbSet<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals
        public DbSet<Warehouse_ColdRoomTemperature> Warehouse_ColdRoomTemperatures { get; set; } // ColdRoomTemperatures
        public DbSet<Warehouse_Color> Warehouse_Colors { get; set; } // Colors
        public DbSet<Warehouse_PackageType> Warehouse_PackageTypes { get; set; } // PackageTypes
        public DbSet<Warehouse_StockGroup> Warehouse_StockGroups { get; set; } // StockGroups
        public DbSet<Warehouse_StockItem> Warehouse_StockItems { get; set; } // StockItems
        public DbSet<Warehouse_StockItemHolding> Warehouse_StockItemHoldings { get; set; } // StockItemHoldings
        public DbSet<Warehouse_StockItemStockGroup> Warehouse_StockItemStockGroups { get; set; } // StockItemStockGroups
        public DbSet<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions
        public DbSet<Warehouse_VehicleTemperature> Warehouse_VehicleTemperatures { get; set; } // VehicleTemperatures

        public FakeWideWorldImportersDbContext()
        {
            _database = null;

            Application_Cities = new FakeDbSet<Application_City>("CityId");
            Application_Countries = new FakeDbSet<Application_Country>("CountryId");
            Application_DeliveryMethods = new FakeDbSet<Application_DeliveryMethod>("DeliveryMethodId");
            Application_PaymentMethods = new FakeDbSet<Application_PaymentMethod>("PaymentMethodId");
            Application_People = new FakeDbSet<Application_Person>("PersonId");
            Application_StateProvinces = new FakeDbSet<Application_StateProvince>("StateProvinceId");
            Application_SystemParameters = new FakeDbSet<Application_SystemParameter>("SystemParameterId");
            Application_TransactionTypes = new FakeDbSet<Application_TransactionType>("TransactionTypeId");
            Purchasing_PurchaseOrders = new FakeDbSet<Purchasing_PurchaseOrder>("PurchaseOrderId");
            Purchasing_PurchaseOrderLines = new FakeDbSet<Purchasing_PurchaseOrderLine>("PurchaseOrderLineId");
            Purchasing_Suppliers = new FakeDbSet<Purchasing_Supplier>("SupplierId");
            Purchasing_SupplierCategories = new FakeDbSet<Purchasing_SupplierCategory>("SupplierCategoryId");
            Purchasing_SupplierTransactions = new FakeDbSet<Purchasing_SupplierTransaction>("SupplierTransactionId");
            Sales_BuyingGroups = new FakeDbSet<Sales_BuyingGroup>("BuyingGroupId");
            Sales_Customers = new FakeDbSet<Sales_Customer>("CustomerId");
            Sales_CustomerCategories = new FakeDbSet<Sales_CustomerCategory>("CustomerCategoryId");
            Sales_CustomerTransactions = new FakeDbSet<Sales_CustomerTransaction>("CustomerTransactionId");
            Sales_Invoices = new FakeDbSet<Sales_Invoice>("InvoiceId");
            Sales_InvoiceLines = new FakeDbSet<Sales_InvoiceLine>("InvoiceLineId");
            Sales_Orders = new FakeDbSet<Sales_Order>("OrderId");
            Sales_OrderLines = new FakeDbSet<Sales_OrderLine>("OrderLineId");
            Sales_SpecialDeals = new FakeDbSet<Sales_SpecialDeal>("SpecialDealId");
            Warehouse_ColdRoomTemperatures = new FakeDbSet<Warehouse_ColdRoomTemperature>("ColdRoomTemperatureId");
            Warehouse_Colors = new FakeDbSet<Warehouse_Color>("ColorId");
            Warehouse_PackageTypes = new FakeDbSet<Warehouse_PackageType>("PackageTypeId");
            Warehouse_StockGroups = new FakeDbSet<Warehouse_StockGroup>("StockGroupId");
            Warehouse_StockItems = new FakeDbSet<Warehouse_StockItem>("StockItemId");
            Warehouse_StockItemHoldings = new FakeDbSet<Warehouse_StockItemHolding>("StockItemId");
            Warehouse_StockItemStockGroups = new FakeDbSet<Warehouse_StockItemStockGroup>("StockItemStockGroupId");
            Warehouse_StockItemTransactions = new FakeDbSet<Warehouse_StockItemTransaction>("StockItemTransactionId");
            Warehouse_VehicleTemperatures = new FakeDbSet<Warehouse_VehicleTemperature>("VehicleTemperatureId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    #endregion

    #region POCO classes

    // Cities
    /// <summary>
    /// Cities that are part of any address (including geographic location)
    /// </summary>
    public class Application_City
    {
        /// <summary>
        /// Numeric ID used for reference to a city within the database
        /// </summary>
        public int CityId { get; set; } // CityID (Primary key)

        /// <summary>
        /// Formal name of the city
        /// </summary>
        public string CityName { get; set; } // CityName (length: 50)

        /// <summary>
        /// State or province for this city
        /// </summary>
        public int StateProvinceId { get; set; } // StateProvinceID

        /// <summary>
        /// Latest available population for the City
        /// </summary>
        public long? LatestRecordedPopulation { get; set; } // LatestRecordedPopulation
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Application_SystemParameters where [SystemParameters].[DeliveryCityID] point to this entity (FK_Application_SystemParameters_DeliveryCityID_Application_Cities)
        /// </summary>
        public virtual ICollection<Application_SystemParameter> Application_SystemParameters_DeliveryCityId { get; set; } // SystemParameters.FK_Application_SystemParameters_DeliveryCityID_Application_Cities

        /// <summary>
        /// Child Application_SystemParameters where [SystemParameters].[PostalCityID] point to this entity (FK_Application_SystemParameters_PostalCityID_Application_Cities)
        /// </summary>
        public virtual ICollection<Application_SystemParameter> Application_SystemParameters_PostalCityId { get; set; } // SystemParameters.FK_Application_SystemParameters_PostalCityID_Application_Cities

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[DeliveryCityID] point to this entity (FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers_DeliveryCityId { get; set; } // Suppliers.FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[PostalCityID] point to this entity (FK_Purchasing_Suppliers_PostalCityID_Application_Cities)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers_PostalCityId { get; set; } // Suppliers.FK_Purchasing_Suppliers_PostalCityID_Application_Cities

        /// <summary>
        /// Child Sales_Customers where [Customers].[DeliveryCityID] point to this entity (FK_Sales_Customers_DeliveryCityID_Application_Cities)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers_DeliveryCityId { get; set; } // Customers.FK_Sales_Customers_DeliveryCityID_Application_Cities

        /// <summary>
        /// Child Sales_Customers where [Customers].[PostalCityID] point to this entity (FK_Sales_Customers_PostalCityID_Application_Cities)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers_PostalCityId { get; set; } // Customers.FK_Sales_Customers_PostalCityID_Application_Cities

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [Cities].([LastEditedBy]) (FK_Application_Cities_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_Cities_Application_People

        /// <summary>
        /// Parent Application_StateProvince pointed by [Cities].([StateProvinceId]) (FK_Application_Cities_StateProvinceID_Application_StateProvinces)
        /// </summary>
        public virtual Application_StateProvince Application_StateProvince { get; set; } // FK_Application_Cities_StateProvinceID_Application_StateProvinces

        public Application_City()
        {
            Sales_Customers_DeliveryCityId = new List<Sales_Customer>();
            Sales_Customers_PostalCityId = new List<Sales_Customer>();
            Purchasing_Suppliers_DeliveryCityId = new List<Purchasing_Supplier>();
            Purchasing_Suppliers_PostalCityId = new List<Purchasing_Supplier>();
            Application_SystemParameters_DeliveryCityId = new List<Application_SystemParameter>();
            Application_SystemParameters_PostalCityId = new List<Application_SystemParameter>();
        }
    }

    // Countries
    /// <summary>
    /// Countries that contain the states or provinces (including geographic boundaries)
    /// </summary>
    public class Application_Country
    {
        /// <summary>
        /// Numeric ID used for reference to a country within the database
        /// </summary>
        public int CountryId { get; set; } // CountryID (Primary key)

        /// <summary>
        /// Name of the country
        /// </summary>
        public string CountryName { get; set; } // CountryName (length: 60)

        /// <summary>
        /// Full formal name of the country as agreed by United Nations
        /// </summary>
        public string FormalName { get; set; } // FormalName (length: 60)

        /// <summary>
        /// 3 letter alphabetic code assigned to the country by ISO
        /// </summary>
        public string IsoAlpha3Code { get; set; } // IsoAlpha3Code (length: 3)

        /// <summary>
        /// Numeric code assigned to the country by ISO
        /// </summary>
        public int? IsoNumericCode { get; set; } // IsoNumericCode

        /// <summary>
        /// Type of country or administrative region
        /// </summary>
        public string CountryType { get; set; } // CountryType (length: 20)

        /// <summary>
        /// Latest available population for the country
        /// </summary>
        public long? LatestRecordedPopulation { get; set; } // LatestRecordedPopulation

        /// <summary>
        /// Name of the continent
        /// </summary>
        public string Continent { get; set; } // Continent (length: 30)

        /// <summary>
        /// Name of the region
        /// </summary>
        public string Region { get; set; } // Region (length: 30)

        /// <summary>
        /// Name of the subregion
        /// </summary>
        public string Subregion { get; set; } // Subregion (length: 30)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Application_StateProvinces where [StateProvinces].[CountryID] point to this entity (FK_Application_StateProvinces_CountryID_Application_Countries)
        /// </summary>
        public virtual ICollection<Application_StateProvince> Application_StateProvinces { get; set; } // StateProvinces.FK_Application_StateProvinces_CountryID_Application_Countries

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [Countries].([LastEditedBy]) (FK_Application_Countries_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_Countries_Application_People

        public Application_Country()
        {
            Application_StateProvinces = new List<Application_StateProvince>();
        }
    }

    // DeliveryMethods
    /// <summary>
    /// Ways that stock items can be delivered (ie: truck/van, post, pickup, courier, etc.
    /// </summary>
    public class Application_DeliveryMethod
    {
        /// <summary>
        /// Numeric ID used for reference to a delivery method within the database
        /// </summary>
        public int DeliveryMethodId { get; set; } // DeliveryMethodID (Primary key)

        /// <summary>
        /// Full name of methods that can be used for delivery of customer orders
        /// </summary>
        public string DeliveryMethodName { get; set; } // DeliveryMethodName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrders where [PurchaseOrders].[DeliveryMethodID] point to this entity (FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders { get; set; } // PurchaseOrders.FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[DeliveryMethodID] point to this entity (FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers.FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Child Sales_Customers where [Customers].[DeliveryMethodID] point to this entity (FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers { get; set; } // Customers.FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[DeliveryMethodID] point to this entity (FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices { get; set; } // Invoices.FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [DeliveryMethods].([LastEditedBy]) (FK_Application_DeliveryMethods_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_DeliveryMethods_Application_People

        public Application_DeliveryMethod()
        {
            Sales_Customers = new List<Sales_Customer>();
            Sales_Invoices = new List<Sales_Invoice>();
            Purchasing_PurchaseOrders = new List<Purchasing_PurchaseOrder>();
            Purchasing_Suppliers = new List<Purchasing_Supplier>();
        }
    }

    // PaymentMethods
    /// <summary>
    /// Ways that payments can be made (ie: cash, check, EFT, etc.
    /// </summary>
    public class Application_PaymentMethod
    {
        /// <summary>
        /// Numeric ID used for reference to a payment type within the database
        /// </summary>
        public int PaymentMethodId { get; set; } // PaymentMethodID (Primary key)

        /// <summary>
        /// Full name of ways that customers can make payments or that suppliers can be paid
        /// </summary>
        public string PaymentMethodName { get; set; } // PaymentMethodName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_SupplierTransactions where [SupplierTransactions].[PaymentMethodID] point to this entity (FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions.FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods

        /// <summary>
        /// Child Sales_CustomerTransactions where [CustomerTransactions].[PaymentMethodID] point to this entity (FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods)
        /// </summary>
        public virtual ICollection<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions.FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [PaymentMethods].([LastEditedBy]) (FK_Application_PaymentMethods_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_PaymentMethods_Application_People

        public Application_PaymentMethod()
        {
            Sales_CustomerTransactions = new List<Sales_CustomerTransaction>();
            Purchasing_SupplierTransactions = new List<Purchasing_SupplierTransaction>();
        }
    }

    // People
    /// <summary>
    /// People known to the application (staff, customer contacts, supplier contacts)
    /// </summary>
    public class Application_Person
    {
        /// <summary>
        /// Numeric ID used for reference to a person within the database
        /// </summary>
        public int PersonId { get; set; } // PersonID (Primary key)

        /// <summary>
        /// Full name for this person
        /// </summary>
        public string FullName { get; set; } // FullName (length: 50)

        /// <summary>
        /// Name that this person prefers to be called
        /// </summary>
        public string PreferredName { get; set; } // PreferredName (length: 50)

        /// <summary>
        /// Name to build full text search on (computed column)
        /// </summary>
        public string SearchName { get; private set; } // SearchName (length: 101)

        /// <summary>
        /// Is this person permitted to log on?
        /// </summary>
        public bool IsPermittedToLogon { get; set; } // IsPermittedToLogon

        /// <summary>
        /// Person&apos;s system logon name
        /// </summary>
        public string LogonName { get; set; } // LogonName (length: 50)

        /// <summary>
        /// Is logon token provided by an external system?
        /// </summary>
        public bool IsExternalLogonProvider { get; set; } // IsExternalLogonProvider

        /// <summary>
        /// Hash of password for users without external logon tokens
        /// </summary>
        public byte[] HashedPassword { get; set; } // HashedPassword

        /// <summary>
        /// Is the currently permitted to make online access?
        /// </summary>
        public bool IsSystemUser { get; set; } // IsSystemUser

        /// <summary>
        /// Is this person an employee?
        /// </summary>
        public bool IsEmployee { get; set; } // IsEmployee

        /// <summary>
        /// Is this person a staff salesperson?
        /// </summary>
        public bool IsSalesperson { get; set; } // IsSalesperson

        /// <summary>
        /// User preferences related to the website (holds JSON data)
        /// </summary>
        public string UserPreferences { get; set; } // UserPreferences

        /// <summary>
        /// Phone number
        /// </summary>
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)

        /// <summary>
        /// Fax number
        /// </summary>
        public string FaxNumber { get; set; } // FaxNumber (length: 20)

        /// <summary>
        /// Email address for this person
        /// </summary>
        public string EmailAddress { get; set; } // EmailAddress (length: 256)

        /// <summary>
        /// Photo of this person
        /// </summary>
        public byte[] Photo { get; set; } // Photo

        /// <summary>
        /// Custom fields for employees and salespeople
        /// </summary>
        public string CustomFields { get; set; } // CustomFields

        /// <summary>
        /// Other languages spoken (computed column from custom fields)
        /// </summary>
        public string OtherLanguages { get; private set; } // OtherLanguages
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Application_Cities where [Cities].[LastEditedBy] point to this entity (FK_Application_Cities_Application_People)
        /// </summary>
        public virtual ICollection<Application_City> Application_Cities { get; set; } // Cities.FK_Application_Cities_Application_People

        /// <summary>
        /// Child Application_Countries where [Countries].[LastEditedBy] point to this entity (FK_Application_Countries_Application_People)
        /// </summary>
        public virtual ICollection<Application_Country> Application_Countries { get; set; } // Countries.FK_Application_Countries_Application_People

        /// <summary>
        /// Child Application_DeliveryMethods where [DeliveryMethods].[LastEditedBy] point to this entity (FK_Application_DeliveryMethods_Application_People)
        /// </summary>
        public virtual ICollection<Application_DeliveryMethod> Application_DeliveryMethods { get; set; } // DeliveryMethods.FK_Application_DeliveryMethods_Application_People

        /// <summary>
        /// Child Application_PaymentMethods where [PaymentMethods].[LastEditedBy] point to this entity (FK_Application_PaymentMethods_Application_People)
        /// </summary>
        public virtual ICollection<Application_PaymentMethod> Application_PaymentMethods { get; set; } // PaymentMethods.FK_Application_PaymentMethods_Application_People

        /// <summary>
        /// Child Application_People where [People].[LastEditedBy] point to this entity (FK_Application_People_Application_People)
        /// </summary>
        public virtual ICollection<Application_Person> Application_People { get; set; } // People.FK_Application_People_Application_People

        /// <summary>
        /// Child Application_StateProvinces where [StateProvinces].[LastEditedBy] point to this entity (FK_Application_StateProvinces_Application_People)
        /// </summary>
        public virtual ICollection<Application_StateProvince> Application_StateProvinces { get; set; } // StateProvinces.FK_Application_StateProvinces_Application_People

        /// <summary>
        /// Child Application_SystemParameters where [SystemParameters].[LastEditedBy] point to this entity (FK_Application_SystemParameters_Application_People)
        /// </summary>
        public virtual ICollection<Application_SystemParameter> Application_SystemParameters { get; set; } // SystemParameters.FK_Application_SystemParameters_Application_People

        /// <summary>
        /// Child Application_TransactionTypes where [TransactionTypes].[LastEditedBy] point to this entity (FK_Application_TransactionTypes_Application_People)
        /// </summary>
        public virtual ICollection<Application_TransactionType> Application_TransactionTypes { get; set; } // TransactionTypes.FK_Application_TransactionTypes_Application_People

        /// <summary>
        /// Child Purchasing_PurchaseOrders where [PurchaseOrders].[ContactPersonID] point to this entity (FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders_ContactPersonId { get; set; } // PurchaseOrders.FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People

        /// <summary>
        /// Child Purchasing_PurchaseOrders where [PurchaseOrders].[LastEditedBy] point to this entity (FK_Purchasing_PurchaseOrders_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders_LastEditedBy { get; set; } // PurchaseOrders.FK_Purchasing_PurchaseOrders_Application_People

        /// <summary>
        /// Child Purchasing_PurchaseOrderLines where [PurchaseOrderLines].[LastEditedBy] point to this entity (FK_Purchasing_PurchaseOrderLines_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines.FK_Purchasing_PurchaseOrderLines_Application_People

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[AlternateContactPersonID] point to this entity (FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers_AlternateContactPersonId { get; set; } // Suppliers.FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[LastEditedBy] point to this entity (FK_Purchasing_Suppliers_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers_LastEditedBy { get; set; } // Suppliers.FK_Purchasing_Suppliers_Application_People

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[PrimaryContactPersonID] point to this entity (FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers_PrimaryContactPersonId { get; set; } // Suppliers.FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People

        /// <summary>
        /// Child Purchasing_SupplierCategories where [SupplierCategories].[LastEditedBy] point to this entity (FK_Purchasing_SupplierCategories_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierCategory> Purchasing_SupplierCategories { get; set; } // SupplierCategories.FK_Purchasing_SupplierCategories_Application_People

        /// <summary>
        /// Child Purchasing_SupplierTransactions where [SupplierTransactions].[LastEditedBy] point to this entity (FK_Purchasing_SupplierTransactions_Application_People)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions.FK_Purchasing_SupplierTransactions_Application_People

        /// <summary>
        /// Child Sales_BuyingGroups where [BuyingGroups].[LastEditedBy] point to this entity (FK_Sales_BuyingGroups_Application_People)
        /// </summary>
        public virtual ICollection<Sales_BuyingGroup> Sales_BuyingGroups { get; set; } // BuyingGroups.FK_Sales_BuyingGroups_Application_People

        /// <summary>
        /// Child Sales_Customers where [Customers].[AlternateContactPersonID] point to this entity (FK_Sales_Customers_AlternateContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers_AlternateContactPersonId { get; set; } // Customers.FK_Sales_Customers_AlternateContactPersonID_Application_People

        /// <summary>
        /// Child Sales_Customers where [Customers].[LastEditedBy] point to this entity (FK_Sales_Customers_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers_LastEditedBy { get; set; } // Customers.FK_Sales_Customers_Application_People

        /// <summary>
        /// Child Sales_Customers where [Customers].[PrimaryContactPersonID] point to this entity (FK_Sales_Customers_PrimaryContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers_PrimaryContactPersonId { get; set; } // Customers.FK_Sales_Customers_PrimaryContactPersonID_Application_People

        /// <summary>
        /// Child Sales_CustomerCategories where [CustomerCategories].[LastEditedBy] point to this entity (FK_Sales_CustomerCategories_Application_People)
        /// </summary>
        public virtual ICollection<Sales_CustomerCategory> Sales_CustomerCategories { get; set; } // CustomerCategories.FK_Sales_CustomerCategories_Application_People

        /// <summary>
        /// Child Sales_CustomerTransactions where [CustomerTransactions].[LastEditedBy] point to this entity (FK_Sales_CustomerTransactions_Application_People)
        /// </summary>
        public virtual ICollection<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions.FK_Sales_CustomerTransactions_Application_People

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[AccountsPersonID] point to this entity (FK_Sales_Invoices_AccountsPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_AccountsPersonId { get; set; } // Invoices.FK_Sales_Invoices_AccountsPersonID_Application_People

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[ContactPersonID] point to this entity (FK_Sales_Invoices_ContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_ContactPersonId { get; set; } // Invoices.FK_Sales_Invoices_ContactPersonID_Application_People

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[LastEditedBy] point to this entity (FK_Sales_Invoices_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_LastEditedBy { get; set; } // Invoices.FK_Sales_Invoices_Application_People

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[PackedByPersonID] point to this entity (FK_Sales_Invoices_PackedByPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_PackedByPersonId { get; set; } // Invoices.FK_Sales_Invoices_PackedByPersonID_Application_People

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[SalespersonPersonID] point to this entity (FK_Sales_Invoices_SalespersonPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_SalespersonPersonId { get; set; } // Invoices.FK_Sales_Invoices_SalespersonPersonID_Application_People

        /// <summary>
        /// Child Sales_InvoiceLines where [InvoiceLines].[LastEditedBy] point to this entity (FK_Sales_InvoiceLines_Application_People)
        /// </summary>
        public virtual ICollection<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines.FK_Sales_InvoiceLines_Application_People

        /// <summary>
        /// Child Sales_Orders where [Orders].[ContactPersonID] point to this entity (FK_Sales_Orders_ContactPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Order> Sales_Orders_ContactPersonId { get; set; } // Orders.FK_Sales_Orders_ContactPersonID_Application_People

        /// <summary>
        /// Child Sales_Orders where [Orders].[LastEditedBy] point to this entity (FK_Sales_Orders_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Order> Sales_Orders_LastEditedBy { get; set; } // Orders.FK_Sales_Orders_Application_People

        /// <summary>
        /// Child Sales_Orders where [Orders].[PickedByPersonID] point to this entity (FK_Sales_Orders_PickedByPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Order> Sales_Orders_PickedByPersonId { get; set; } // Orders.FK_Sales_Orders_PickedByPersonID_Application_People

        /// <summary>
        /// Child Sales_Orders where [Orders].[SalespersonPersonID] point to this entity (FK_Sales_Orders_SalespersonPersonID_Application_People)
        /// </summary>
        public virtual ICollection<Sales_Order> Sales_Orders_SalespersonPersonId { get; set; } // Orders.FK_Sales_Orders_SalespersonPersonID_Application_People

        /// <summary>
        /// Child Sales_OrderLines where [OrderLines].[LastEditedBy] point to this entity (FK_Sales_OrderLines_Application_People)
        /// </summary>
        public virtual ICollection<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines.FK_Sales_OrderLines_Application_People

        /// <summary>
        /// Child Sales_SpecialDeals where [SpecialDeals].[LastEditedBy] point to this entity (FK_Sales_SpecialDeals_Application_People)
        /// </summary>
        public virtual ICollection<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals.FK_Sales_SpecialDeals_Application_People

        /// <summary>
        /// Child Warehouse_Colors where [Colors].[LastEditedBy] point to this entity (FK_Warehouse_Colors_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_Color> Warehouse_Colors { get; set; } // Colors.FK_Warehouse_Colors_Application_People

        /// <summary>
        /// Child Warehouse_PackageTypes where [PackageTypes].[LastEditedBy] point to this entity (FK_Warehouse_PackageTypes_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_PackageType> Warehouse_PackageTypes { get; set; } // PackageTypes.FK_Warehouse_PackageTypes_Application_People

        /// <summary>
        /// Child Warehouse_StockGroups where [StockGroups].[LastEditedBy] point to this entity (FK_Warehouse_StockGroups_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_StockGroup> Warehouse_StockGroups { get; set; } // StockGroups.FK_Warehouse_StockGroups_Application_People

        /// <summary>
        /// Child Warehouse_StockItems where [StockItems].[LastEditedBy] point to this entity (FK_Warehouse_StockItems_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_StockItem> Warehouse_StockItems { get; set; } // StockItems.FK_Warehouse_StockItems_Application_People

        /// <summary>
        /// Child Warehouse_StockItemHoldings where [StockItemHoldings].[LastEditedBy] point to this entity (FK_Warehouse_StockItemHoldings_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemHolding> Warehouse_StockItemHoldings { get; set; } // StockItemHoldings.FK_Warehouse_StockItemHoldings_Application_People

        /// <summary>
        /// Child Warehouse_StockItemStockGroups where [StockItemStockGroups].[LastEditedBy] point to this entity (FK_Warehouse_StockItemStockGroups_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemStockGroup> Warehouse_StockItemStockGroups { get; set; } // StockItemStockGroups.FK_Warehouse_StockItemStockGroups_Application_People

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[LastEditedBy] point to this entity (FK_Warehouse_StockItemTransactions_Application_People)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_Application_People

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [People].([LastEditedBy]) (FK_Application_People_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person_LastEditedBy { get; set; } // FK_Application_People_Application_People

        public Application_Person()
        {
            Sales_BuyingGroups = new List<Sales_BuyingGroup>();
            Application_Cities = new List<Application_City>();
            Warehouse_Colors = new List<Warehouse_Color>();
            Application_Countries = new List<Application_Country>();
            Sales_CustomerCategories = new List<Sales_CustomerCategory>();
            Sales_Customers_AlternateContactPersonId = new List<Sales_Customer>();
            Sales_Customers_LastEditedBy = new List<Sales_Customer>();
            Sales_Customers_PrimaryContactPersonId = new List<Sales_Customer>();
            Sales_CustomerTransactions = new List<Sales_CustomerTransaction>();
            Application_DeliveryMethods = new List<Application_DeliveryMethod>();
            Sales_InvoiceLines = new List<Sales_InvoiceLine>();
            Sales_Invoices_AccountsPersonId = new List<Sales_Invoice>();
            Sales_Invoices_ContactPersonId = new List<Sales_Invoice>();
            Sales_Invoices_LastEditedBy = new List<Sales_Invoice>();
            Sales_Invoices_PackedByPersonId = new List<Sales_Invoice>();
            Sales_Invoices_SalespersonPersonId = new List<Sales_Invoice>();
            Sales_OrderLines = new List<Sales_OrderLine>();
            Sales_Orders_ContactPersonId = new List<Sales_Order>();
            Sales_Orders_LastEditedBy = new List<Sales_Order>();
            Sales_Orders_PickedByPersonId = new List<Sales_Order>();
            Sales_Orders_SalespersonPersonId = new List<Sales_Order>();
            Warehouse_PackageTypes = new List<Warehouse_PackageType>();
            Application_PaymentMethods = new List<Application_PaymentMethod>();
            Application_People = new List<Application_Person>();
            Purchasing_PurchaseOrderLines = new List<Purchasing_PurchaseOrderLine>();
            Purchasing_PurchaseOrders_ContactPersonId = new List<Purchasing_PurchaseOrder>();
            Purchasing_PurchaseOrders_LastEditedBy = new List<Purchasing_PurchaseOrder>();
            Sales_SpecialDeals = new List<Sales_SpecialDeal>();
            Application_StateProvinces = new List<Application_StateProvince>();
            Warehouse_StockGroups = new List<Warehouse_StockGroup>();
            Warehouse_StockItemHoldings = new List<Warehouse_StockItemHolding>();
            Warehouse_StockItems = new List<Warehouse_StockItem>();
            Warehouse_StockItemStockGroups = new List<Warehouse_StockItemStockGroup>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
            Purchasing_SupplierCategories = new List<Purchasing_SupplierCategory>();
            Purchasing_Suppliers_AlternateContactPersonId = new List<Purchasing_Supplier>();
            Purchasing_Suppliers_LastEditedBy = new List<Purchasing_Supplier>();
            Purchasing_Suppliers_PrimaryContactPersonId = new List<Purchasing_Supplier>();
            Purchasing_SupplierTransactions = new List<Purchasing_SupplierTransaction>();
            Application_SystemParameters = new List<Application_SystemParameter>();
            Application_TransactionTypes = new List<Application_TransactionType>();
        }
    }

    // StateProvinces
    /// <summary>
    /// States or provinces that contain cities (including geographic location)
    /// </summary>
    public class Application_StateProvince
    {
        /// <summary>
        /// Numeric ID used for reference to a state or province within the database
        /// </summary>
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        /// <summary>
        /// Common code for this state or province (such as WA - Washington for the USA)
        /// </summary>
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 5)

        /// <summary>
        /// Formal name of the state or province
        /// </summary>
        public string StateProvinceName { get; set; } // StateProvinceName (length: 50)

        /// <summary>
        /// Country for this StateProvince
        /// </summary>
        public int CountryId { get; set; } // CountryID

        /// <summary>
        /// Sales territory for this StateProvince
        /// </summary>
        public string SalesTerritory { get; set; } // SalesTerritory (length: 50)

        /// <summary>
        /// Latest available population for the StateProvince
        /// </summary>
        public long? LatestRecordedPopulation { get; set; } // LatestRecordedPopulation
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Application_Cities where [Cities].[StateProvinceID] point to this entity (FK_Application_Cities_StateProvinceID_Application_StateProvinces)
        /// </summary>
        public virtual ICollection<Application_City> Application_Cities { get; set; } // Cities.FK_Application_Cities_StateProvinceID_Application_StateProvinces

        // Foreign keys

        /// <summary>
        /// Parent Application_Country pointed by [StateProvinces].([CountryId]) (FK_Application_StateProvinces_CountryID_Application_Countries)
        /// </summary>
        public virtual Application_Country Application_Country { get; set; } // FK_Application_StateProvinces_CountryID_Application_Countries

        /// <summary>
        /// Parent Application_Person pointed by [StateProvinces].([LastEditedBy]) (FK_Application_StateProvinces_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_StateProvinces_Application_People

        public Application_StateProvince()
        {
            Application_Cities = new List<Application_City>();
        }
    }

    // SystemParameters
    /// <summary>
    /// Any configurable parameters for the whole system
    /// </summary>
    public class Application_SystemParameter
    {
        /// <summary>
        /// Numeric ID used for row holding system parameters
        /// </summary>
        public int SystemParameterId { get; set; } // SystemParameterID (Primary key)

        /// <summary>
        /// First address line for the company
        /// </summary>
        public string DeliveryAddressLine1 { get; set; } // DeliveryAddressLine1 (length: 60)

        /// <summary>
        /// Second address line for the company
        /// </summary>
        public string DeliveryAddressLine2 { get; set; } // DeliveryAddressLine2 (length: 60)

        /// <summary>
        /// ID of the city for this address
        /// </summary>
        public int DeliveryCityId { get; set; } // DeliveryCityID

        /// <summary>
        /// Postal code for the company
        /// </summary>
        public string DeliveryPostalCode { get; set; } // DeliveryPostalCode (length: 10)

        /// <summary>
        /// First postal address line for the company
        /// </summary>
        public string PostalAddressLine1 { get; set; } // PostalAddressLine1 (length: 60)

        /// <summary>
        /// Second postaladdress line for the company
        /// </summary>
        public string PostalAddressLine2 { get; set; } // PostalAddressLine2 (length: 60)

        /// <summary>
        /// ID of the city for this postaladdress
        /// </summary>
        public int PostalCityId { get; set; } // PostalCityID

        /// <summary>
        /// Postal code for the company when sending via mail
        /// </summary>
        public string PostalPostalCode { get; set; } // PostalPostalCode (length: 10)

        /// <summary>
        /// JSON-structured application settings
        /// </summary>
        public string ApplicationSettings { get; set; } // ApplicationSettings
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_City pointed by [SystemParameters].([DeliveryCityId]) (FK_Application_SystemParameters_DeliveryCityID_Application_Cities)
        /// </summary>
        public virtual Application_City DeliveryCity { get; set; } // FK_Application_SystemParameters_DeliveryCityID_Application_Cities

        /// <summary>
        /// Parent Application_City pointed by [SystemParameters].([PostalCityId]) (FK_Application_SystemParameters_PostalCityID_Application_Cities)
        /// </summary>
        public virtual Application_City PostalCity { get; set; } // FK_Application_SystemParameters_PostalCityID_Application_Cities

        /// <summary>
        /// Parent Application_Person pointed by [SystemParameters].([LastEditedBy]) (FK_Application_SystemParameters_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_SystemParameters_Application_People

        public Application_SystemParameter()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // TransactionTypes
    /// <summary>
    /// Types of customer, supplier, or stock transactions (ie: invoice, credit note, etc.)
    /// </summary>
    public class Application_TransactionType
    {
        /// <summary>
        /// Numeric ID used for reference to a transaction type within the database
        /// </summary>
        public int TransactionTypeId { get; set; } // TransactionTypeID (Primary key)

        /// <summary>
        /// Full name of the transaction type
        /// </summary>
        public string TransactionTypeName { get; set; } // TransactionTypeName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_SupplierTransactions where [SupplierTransactions].[TransactionTypeID] point to this entity (FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions.FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes

        /// <summary>
        /// Child Sales_CustomerTransactions where [CustomerTransactions].[TransactionTypeID] point to this entity (FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes)
        /// </summary>
        public virtual ICollection<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions.FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[TransactionTypeID] point to this entity (FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [TransactionTypes].([LastEditedBy]) (FK_Application_TransactionTypes_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Application_TransactionTypes_Application_People

        public Application_TransactionType()
        {
            Sales_CustomerTransactions = new List<Sales_CustomerTransaction>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
            Purchasing_SupplierTransactions = new List<Purchasing_SupplierTransaction>();
        }
    }

    // PurchaseOrders
    /// <summary>
    /// Details of supplier purchase orders
    /// </summary>
    public class Purchasing_PurchaseOrder
    {
        /// <summary>
        /// Numeric ID used for reference to a purchase order within the database
        /// </summary>
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        /// <summary>
        /// Supplier for this purchase order
        /// </summary>
        public int SupplierId { get; set; } // SupplierID

        /// <summary>
        /// Date that this purchase order was raised
        /// </summary>
        public DateTime OrderDate { get; set; } // OrderDate

        /// <summary>
        /// How this purchase order should be delivered
        /// </summary>
        public int DeliveryMethodId { get; set; } // DeliveryMethodID

        /// <summary>
        /// The person who is the primary contact for this purchase order
        /// </summary>
        public int ContactPersonId { get; set; } // ContactPersonID

        /// <summary>
        /// Expected delivery date for this purchase order
        /// </summary>
        public DateTime? ExpectedDeliveryDate { get; set; } // ExpectedDeliveryDate

        /// <summary>
        /// Supplier reference for our organization (might be our account number at the supplier)
        /// </summary>
        public string SupplierReference { get; set; } // SupplierReference (length: 20)

        /// <summary>
        /// Is this purchase order now considered finalized?
        /// </summary>
        public bool IsOrderFinalized { get; set; } // IsOrderFinalized

        /// <summary>
        /// Any comments related this purchase order (comments sent to the supplier)
        /// </summary>
        public string Comments { get; set; } // Comments

        /// <summary>
        /// Any internal comments related this purchase order (comments for internal reference only and not sent to the supplier)
        /// </summary>
        public string InternalComments { get; set; } // InternalComments
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderLines where [PurchaseOrderLines].[PurchaseOrderID] point to this entity (FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines.FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders

        /// <summary>
        /// Child Purchasing_SupplierTransactions where [SupplierTransactions].[PurchaseOrderID] point to this entity (FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions.FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[PurchaseOrderID] point to this entity (FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders

        // Foreign keys

        /// <summary>
        /// Parent Application_DeliveryMethod pointed by [PurchaseOrders].([DeliveryMethodId]) (FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual Application_DeliveryMethod Application_DeliveryMethod { get; set; } // FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Parent Application_Person pointed by [PurchaseOrders].([LastEditedBy]) (FK_Purchasing_PurchaseOrders_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person_LastEditedBy { get; set; } // FK_Purchasing_PurchaseOrders_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [PurchaseOrders].([ContactPersonId]) (FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person ContactPerson { get; set; } // FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People

        /// <summary>
        /// Parent Purchasing_Supplier pointed by [PurchaseOrders].([SupplierId]) (FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual Purchasing_Supplier Purchasing_Supplier { get; set; } // FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers

        public Purchasing_PurchaseOrder()
        {
            LastEditedWhen = DateTime.Now;
            Purchasing_PurchaseOrderLines = new List<Purchasing_PurchaseOrderLine>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
            Purchasing_SupplierTransactions = new List<Purchasing_SupplierTransaction>();
        }
    }

    // PurchaseOrderLines
    /// <summary>
    /// Detail lines from supplier purchase orders
    /// </summary>
    public class Purchasing_PurchaseOrderLine
    {
        /// <summary>
        /// Numeric ID used for reference to a line on a purchase order within the database
        /// </summary>
        public int PurchaseOrderLineId { get; set; } // PurchaseOrderLineID (Primary key)

        /// <summary>
        /// Purchase order that this line is associated with
        /// </summary>
        public int PurchaseOrderId { get; set; } // PurchaseOrderID

        /// <summary>
        /// Stock item for this purchase order line
        /// </summary>
        public int StockItemId { get; set; } // StockItemID

        /// <summary>
        /// Quantity of the stock item that is ordered
        /// </summary>
        public int OrderedOuters { get; set; } // OrderedOuters

        /// <summary>
        /// Description of the item to be supplied (Often the stock item name but could be supplier description)
        /// </summary>
        public string Description { get; set; } // Description (length: 100)

        /// <summary>
        /// Total quantity of the stock item that has been received so far
        /// </summary>
        public int ReceivedOuters { get; set; } // ReceivedOuters

        /// <summary>
        /// Type of package received
        /// </summary>
        public int PackageTypeId { get; set; } // PackageTypeID

        /// <summary>
        /// The unit price that we expect to be charged
        /// </summary>
        public decimal? ExpectedUnitPricePerOuter { get; set; } // ExpectedUnitPricePerOuter

        /// <summary>
        /// The last date on which this stock item was received for this purchase order
        /// </summary>
        public DateTime? LastReceiptDate { get; set; } // LastReceiptDate

        /// <summary>
        /// Is this purchase order line now considered finalized? (Receipted quantities and weights are often not precise)
        /// </summary>
        public bool IsOrderLineFinalized { get; set; } // IsOrderLineFinalized
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [PurchaseOrderLines].([LastEditedBy]) (FK_Purchasing_PurchaseOrderLines_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Purchasing_PurchaseOrderLines_Application_People

        /// <summary>
        /// Parent Purchasing_PurchaseOrder pointed by [PurchaseOrderLines].([PurchaseOrderId]) (FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders)
        /// </summary>
        public virtual Purchasing_PurchaseOrder Purchasing_PurchaseOrder { get; set; } // FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders

        /// <summary>
        /// Parent Warehouse_PackageType pointed by [PurchaseOrderLines].([PackageTypeId]) (FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes)
        /// </summary>
        public virtual Warehouse_PackageType Warehouse_PackageType { get; set; } // FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [PurchaseOrderLines].([StockItemId]) (FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems

        public Purchasing_PurchaseOrderLine()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // Suppliers
    /// <summary>
    /// Main entity table for suppliers (organizations)
    /// </summary>
    public class Purchasing_Supplier
    {
        /// <summary>
        /// Numeric ID used for reference to a supplier within the database
        /// </summary>
        public int SupplierId { get; set; } // SupplierID (Primary key)

        /// <summary>
        /// Supplier&apos;s full name (usually a trading name)
        /// </summary>
        public string SupplierName { get; set; } // SupplierName (length: 100)

        /// <summary>
        /// Supplier&apos;s category
        /// </summary>
        public int SupplierCategoryId { get; set; } // SupplierCategoryID

        /// <summary>
        /// Primary contact
        /// </summary>
        public int PrimaryContactPersonId { get; set; } // PrimaryContactPersonID

        /// <summary>
        /// Alternate contact
        /// </summary>
        public int AlternateContactPersonId { get; set; } // AlternateContactPersonID

        /// <summary>
        /// Standard delivery method for stock items received from this supplier
        /// </summary>
        public int? DeliveryMethodId { get; set; } // DeliveryMethodID

        /// <summary>
        /// ID of the delivery city for this address
        /// </summary>
        public int DeliveryCityId { get; set; } // DeliveryCityID

        /// <summary>
        /// ID of the mailing city for this address
        /// </summary>
        public int PostalCityId { get; set; } // PostalCityID

        /// <summary>
        /// Supplier reference for our organization (might be our account number at the supplier)
        /// </summary>
        public string SupplierReference { get; set; } // SupplierReference (length: 20)

        /// <summary>
        /// Supplier&apos;s bank account name (ie name on the account)
        /// </summary>
        public string BankAccountName { get; set; } // BankAccountName (length: 50)

        /// <summary>
        /// Supplier&apos;s bank branch
        /// </summary>
        public string BankAccountBranch { get; set; } // BankAccountBranch (length: 50)

        /// <summary>
        /// Supplier&apos;s bank account code (usually a numeric reference for the bank branch)
        /// </summary>
        public string BankAccountCode { get; set; } // BankAccountCode (length: 20)

        /// <summary>
        /// Supplier&apos;s bank account number
        /// </summary>
        public string BankAccountNumber { get; set; } // BankAccountNumber (length: 20)

        /// <summary>
        /// Supplier&apos;s bank&apos;s international code (such as a SWIFT code)
        /// </summary>
        public string BankInternationalCode { get; set; } // BankInternationalCode (length: 20)

        /// <summary>
        /// Number of days for payment of an invoice (ie payment terms)
        /// </summary>
        public int PaymentDays { get; set; } // PaymentDays

        /// <summary>
        /// Internal comments (not exposed outside organization)
        /// </summary>
        public string InternalComments { get; set; } // InternalComments

        /// <summary>
        /// Phone number
        /// </summary>
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)

        /// <summary>
        /// Fax number
        /// </summary>
        public string FaxNumber { get; set; } // FaxNumber (length: 20)

        /// <summary>
        /// URL for the website for this supplier
        /// </summary>
        public string WebsiteUrl { get; set; } // WebsiteURL (length: 256)

        /// <summary>
        /// First delivery address line for the supplier
        /// </summary>
        public string DeliveryAddressLine1 { get; set; } // DeliveryAddressLine1 (length: 60)

        /// <summary>
        /// Second delivery address line for the supplier
        /// </summary>
        public string DeliveryAddressLine2 { get; set; } // DeliveryAddressLine2 (length: 60)

        /// <summary>
        /// Delivery postal code for the supplier
        /// </summary>
        public string DeliveryPostalCode { get; set; } // DeliveryPostalCode (length: 10)

        /// <summary>
        /// First postal address line for the supplier
        /// </summary>
        public string PostalAddressLine1 { get; set; } // PostalAddressLine1 (length: 60)

        /// <summary>
        /// Second postal address line for the supplier
        /// </summary>
        public string PostalAddressLine2 { get; set; } // PostalAddressLine2 (length: 60)

        /// <summary>
        /// Postal code for the supplier when sending by mail
        /// </summary>
        public string PostalPostalCode { get; set; } // PostalPostalCode (length: 10)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrders where [PurchaseOrders].[SupplierID] point to this entity (FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrder> Purchasing_PurchaseOrders { get; set; } // PurchaseOrders.FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers

        /// <summary>
        /// Child Purchasing_SupplierTransactions where [SupplierTransactions].[SupplierID] point to this entity (FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual ICollection<Purchasing_SupplierTransaction> Purchasing_SupplierTransactions { get; set; } // SupplierTransactions.FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers

        /// <summary>
        /// Child Warehouse_StockItems where [StockItems].[SupplierID] point to this entity (FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual ICollection<Warehouse_StockItem> Warehouse_StockItems { get; set; } // StockItems.FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[SupplierID] point to this entity (FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers

        // Foreign keys

        /// <summary>
        /// Parent Application_City pointed by [Suppliers].([DeliveryCityId]) (FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities)
        /// </summary>
        public virtual Application_City DeliveryCity { get; set; } // FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities

        /// <summary>
        /// Parent Application_City pointed by [Suppliers].([PostalCityId]) (FK_Purchasing_Suppliers_PostalCityID_Application_Cities)
        /// </summary>
        public virtual Application_City PostalCity { get; set; } // FK_Purchasing_Suppliers_PostalCityID_Application_Cities

        /// <summary>
        /// Parent Application_DeliveryMethod pointed by [Suppliers].([DeliveryMethodId]) (FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual Application_DeliveryMethod Application_DeliveryMethod { get; set; } // FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Parent Application_Person pointed by [Suppliers].([AlternateContactPersonId]) (FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person AlternateContactPerson { get; set; } // FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Suppliers].([LastEditedBy]) (FK_Purchasing_Suppliers_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person_LastEditedBy { get; set; } // FK_Purchasing_Suppliers_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Suppliers].([PrimaryContactPersonId]) (FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person PrimaryContactPerson { get; set; } // FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People

        /// <summary>
        /// Parent Purchasing_SupplierCategory pointed by [Suppliers].([SupplierCategoryId]) (FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories)
        /// </summary>
        public virtual Purchasing_SupplierCategory Purchasing_SupplierCategory { get; set; } // FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories

        public Purchasing_Supplier()
        {
            Purchasing_PurchaseOrders = new List<Purchasing_PurchaseOrder>();
            Warehouse_StockItems = new List<Warehouse_StockItem>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
            Purchasing_SupplierTransactions = new List<Purchasing_SupplierTransaction>();
        }
    }

    // SupplierCategories
    /// <summary>
    /// Categories for suppliers (ie novelties, toys, clothing, packaging, etc.)
    /// </summary>
    public class Purchasing_SupplierCategory
    {
        /// <summary>
        /// Numeric ID used for reference to a supplier category within the database
        /// </summary>
        public int SupplierCategoryId { get; set; } // SupplierCategoryID (Primary key)

        /// <summary>
        /// Full name of the category that suppliers can be assigned to
        /// </summary>
        public string SupplierCategoryName { get; set; } // SupplierCategoryName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_Suppliers where [Suppliers].[SupplierCategoryID] point to this entity (FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories)
        /// </summary>
        public virtual ICollection<Purchasing_Supplier> Purchasing_Suppliers { get; set; } // Suppliers.FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [SupplierCategories].([LastEditedBy]) (FK_Purchasing_SupplierCategories_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Purchasing_SupplierCategories_Application_People

        public Purchasing_SupplierCategory()
        {
            Purchasing_Suppliers = new List<Purchasing_Supplier>();
        }
    }

    // SupplierTransactions
    /// <summary>
    /// All financial transactions that are supplier-related
    /// </summary>
    public class Purchasing_SupplierTransaction
    {
        /// <summary>
        /// Numeric ID used to refer to a supplier transaction within the database
        /// </summary>
        public int SupplierTransactionId { get; set; } // SupplierTransactionID (Primary key)

        /// <summary>
        /// Supplier for this transaction
        /// </summary>
        public int SupplierId { get; set; } // SupplierID

        /// <summary>
        /// Type of transaction
        /// </summary>
        public int TransactionTypeId { get; set; } // TransactionTypeID

        /// <summary>
        /// ID of an purchase order (for transactions associated with a purchase order)
        /// </summary>
        public int? PurchaseOrderId { get; set; } // PurchaseOrderID

        /// <summary>
        /// ID of a payment method (for transactions involving payments)
        /// </summary>
        public int? PaymentMethodId { get; set; } // PaymentMethodID

        /// <summary>
        /// Invoice number for an invoice received from the supplier
        /// </summary>
        public string SupplierInvoiceNumber { get; set; } // SupplierInvoiceNumber (length: 20)

        /// <summary>
        /// Date for the transaction
        /// </summary>
        public DateTime TransactionDate { get; set; } // TransactionDate

        /// <summary>
        /// Transaction amount (excluding tax)
        /// </summary>
        public decimal AmountExcludingTax { get; set; } // AmountExcludingTax

        /// <summary>
        /// Tax amount calculated
        /// </summary>
        public decimal TaxAmount { get; set; } // TaxAmount

        /// <summary>
        /// Transaction amount (including tax)
        /// </summary>
        public decimal TransactionAmount { get; set; } // TransactionAmount

        /// <summary>
        /// Amount still outstanding for this transaction
        /// </summary>
        public decimal OutstandingBalance { get; set; } // OutstandingBalance

        /// <summary>
        /// Date that this transaction was finalized (if it has been)
        /// </summary>
        public DateTime? FinalizationDate { get; set; } // FinalizationDate

        /// <summary>
        /// Is this transaction finalized (invoices, credits and payments have been matched)
        /// </summary>
        public bool? IsFinalized { get; private set; } // IsFinalized
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_PaymentMethod pointed by [SupplierTransactions].([PaymentMethodId]) (FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods)
        /// </summary>
        public virtual Application_PaymentMethod Application_PaymentMethod { get; set; } // FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods

        /// <summary>
        /// Parent Application_Person pointed by [SupplierTransactions].([LastEditedBy]) (FK_Purchasing_SupplierTransactions_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Purchasing_SupplierTransactions_Application_People

        /// <summary>
        /// Parent Application_TransactionType pointed by [SupplierTransactions].([TransactionTypeId]) (FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes)
        /// </summary>
        public virtual Application_TransactionType Application_TransactionType { get; set; } // FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes

        /// <summary>
        /// Parent Purchasing_PurchaseOrder pointed by [SupplierTransactions].([PurchaseOrderId]) (FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders)
        /// </summary>
        public virtual Purchasing_PurchaseOrder Purchasing_PurchaseOrder { get; set; } // FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders

        /// <summary>
        /// Parent Purchasing_Supplier pointed by [SupplierTransactions].([SupplierId]) (FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual Purchasing_Supplier Purchasing_Supplier { get; set; } // FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers

        public Purchasing_SupplierTransaction()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // BuyingGroups
    /// <summary>
    /// Customer organizations can be part of groups that exert greater buying power
    /// </summary>
    public class Sales_BuyingGroup
    {
        /// <summary>
        /// Numeric ID used for reference to a buying group within the database
        /// </summary>
        public int BuyingGroupId { get; set; } // BuyingGroupID (Primary key)

        /// <summary>
        /// Full name of a buying group that customers can be members of
        /// </summary>
        public string BuyingGroupName { get; set; } // BuyingGroupName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Sales_Customers where [Customers].[BuyingGroupID] point to this entity (FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers { get; set; } // Customers.FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups

        /// <summary>
        /// Child Sales_SpecialDeals where [SpecialDeals].[BuyingGroupID] point to this entity (FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups)
        /// </summary>
        public virtual ICollection<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals.FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [BuyingGroups].([LastEditedBy]) (FK_Sales_BuyingGroups_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Sales_BuyingGroups_Application_People

        public Sales_BuyingGroup()
        {
            Sales_Customers = new List<Sales_Customer>();
            Sales_SpecialDeals = new List<Sales_SpecialDeal>();
        }
    }

    // Customers
    /// <summary>
    /// Main entity tables for customers (organizations or individuals)
    /// </summary>
    public class Sales_Customer
    {
        /// <summary>
        /// Numeric ID used for reference to a customer within the database
        /// </summary>
        public int CustomerId { get; set; } // CustomerID (Primary key)

        /// <summary>
        /// Customer&apos;s full name (usually a trading name)
        /// </summary>
        public string CustomerName { get; set; } // CustomerName (length: 100)

        /// <summary>
        /// Customer that this is billed to (usually the same customer but can be another parent company)
        /// </summary>
        public int BillToCustomerId { get; set; } // BillToCustomerID

        /// <summary>
        /// Customer&apos;s category
        /// </summary>
        public int CustomerCategoryId { get; set; } // CustomerCategoryID

        /// <summary>
        /// Customer&apos;s buying group (optional)
        /// </summary>
        public int? BuyingGroupId { get; set; } // BuyingGroupID

        /// <summary>
        /// Primary contact
        /// </summary>
        public int PrimaryContactPersonId { get; set; } // PrimaryContactPersonID

        /// <summary>
        /// Alternate contact
        /// </summary>
        public int? AlternateContactPersonId { get; set; } // AlternateContactPersonID

        /// <summary>
        /// Standard delivery method for stock items sent to this customer
        /// </summary>
        public int DeliveryMethodId { get; set; } // DeliveryMethodID

        /// <summary>
        /// ID of the delivery city for this address
        /// </summary>
        public int DeliveryCityId { get; set; } // DeliveryCityID

        /// <summary>
        /// ID of the postal city for this address
        /// </summary>
        public int PostalCityId { get; set; } // PostalCityID

        /// <summary>
        /// Credit limit for this customer (NULL if unlimited)
        /// </summary>
        public decimal? CreditLimit { get; set; } // CreditLimit

        /// <summary>
        /// Date this customer account was opened
        /// </summary>
        public DateTime AccountOpenedDate { get; set; } // AccountOpenedDate

        /// <summary>
        /// Standard discount offered to this customer
        /// </summary>
        public decimal StandardDiscountPercentage { get; set; } // StandardDiscountPercentage

        /// <summary>
        /// Is a statement sent to this customer? (Or do they just pay on each invoice?)
        /// </summary>
        public bool IsStatementSent { get; set; } // IsStatementSent

        /// <summary>
        /// Is this customer on credit hold? (Prevents further deliveries to this customer)
        /// </summary>
        public bool IsOnCreditHold { get; set; } // IsOnCreditHold

        /// <summary>
        /// Number of days for payment of an invoice (ie payment terms)
        /// </summary>
        public int PaymentDays { get; set; } // PaymentDays

        /// <summary>
        /// Phone number
        /// </summary>
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)

        /// <summary>
        /// Fax number
        /// </summary>
        public string FaxNumber { get; set; } // FaxNumber (length: 20)

        /// <summary>
        /// Normal delivery run for this customer
        /// </summary>
        public string DeliveryRun { get; set; } // DeliveryRun (length: 5)

        /// <summary>
        /// Normal position in the delivery run for this customer
        /// </summary>
        public string RunPosition { get; set; } // RunPosition (length: 5)

        /// <summary>
        /// URL for the website for this customer
        /// </summary>
        public string WebsiteUrl { get; set; } // WebsiteURL (length: 256)

        /// <summary>
        /// First delivery address line for the customer
        /// </summary>
        public string DeliveryAddressLine1 { get; set; } // DeliveryAddressLine1 (length: 60)

        /// <summary>
        /// Second delivery address line for the customer
        /// </summary>
        public string DeliveryAddressLine2 { get; set; } // DeliveryAddressLine2 (length: 60)

        /// <summary>
        /// Delivery postal code for the customer
        /// </summary>
        public string DeliveryPostalCode { get; set; } // DeliveryPostalCode (length: 10)

        /// <summary>
        /// First postal address line for the customer
        /// </summary>
        public string PostalAddressLine1 { get; set; } // PostalAddressLine1 (length: 60)

        /// <summary>
        /// Second postal address line for the customer
        /// </summary>
        public string PostalAddressLine2 { get; set; } // PostalAddressLine2 (length: 60)

        /// <summary>
        /// Postal code for the customer when sending by mail
        /// </summary>
        public string PostalPostalCode { get; set; } // PostalPostalCode (length: 10)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Sales_Customers where [Customers].[BillToCustomerID] point to this entity (FK_Sales_Customers_BillToCustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers { get; set; } // Customers.FK_Sales_Customers_BillToCustomerID_Sales_Customers

        /// <summary>
        /// Child Sales_CustomerTransactions where [CustomerTransactions].[CustomerID] point to this entity (FK_Sales_CustomerTransactions_CustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions.FK_Sales_CustomerTransactions_CustomerID_Sales_Customers

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[BillToCustomerID] point to this entity (FK_Sales_Invoices_BillToCustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_BillToCustomerId { get; set; } // Invoices.FK_Sales_Invoices_BillToCustomerID_Sales_Customers

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[CustomerID] point to this entity (FK_Sales_Invoices_CustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices_CustomerId { get; set; } // Invoices.FK_Sales_Invoices_CustomerID_Sales_Customers

        /// <summary>
        /// Child Sales_Orders where [Orders].[CustomerID] point to this entity (FK_Sales_Orders_CustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Sales_Order> Sales_Orders { get; set; } // Orders.FK_Sales_Orders_CustomerID_Sales_Customers

        /// <summary>
        /// Child Sales_SpecialDeals where [SpecialDeals].[CustomerID] point to this entity (FK_Sales_SpecialDeals_CustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals.FK_Sales_SpecialDeals_CustomerID_Sales_Customers

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[CustomerID] point to this entity (FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers

        // Foreign keys

        /// <summary>
        /// Parent Application_City pointed by [Customers].([DeliveryCityId]) (FK_Sales_Customers_DeliveryCityID_Application_Cities)
        /// </summary>
        public virtual Application_City DeliveryCity { get; set; } // FK_Sales_Customers_DeliveryCityID_Application_Cities

        /// <summary>
        /// Parent Application_City pointed by [Customers].([PostalCityId]) (FK_Sales_Customers_PostalCityID_Application_Cities)
        /// </summary>
        public virtual Application_City PostalCity { get; set; } // FK_Sales_Customers_PostalCityID_Application_Cities

        /// <summary>
        /// Parent Application_DeliveryMethod pointed by [Customers].([DeliveryMethodId]) (FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual Application_DeliveryMethod Application_DeliveryMethod { get; set; } // FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Parent Application_Person pointed by [Customers].([AlternateContactPersonId]) (FK_Sales_Customers_AlternateContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person AlternateContactPerson { get; set; } // FK_Sales_Customers_AlternateContactPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Customers].([LastEditedBy]) (FK_Sales_Customers_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person_LastEditedBy { get; set; } // FK_Sales_Customers_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Customers].([PrimaryContactPersonId]) (FK_Sales_Customers_PrimaryContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person PrimaryContactPerson { get; set; } // FK_Sales_Customers_PrimaryContactPersonID_Application_People

        /// <summary>
        /// Parent Sales_BuyingGroup pointed by [Customers].([BuyingGroupId]) (FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups)
        /// </summary>
        public virtual Sales_BuyingGroup Sales_BuyingGroup { get; set; } // FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups

        /// <summary>
        /// Parent Sales_Customer pointed by [Customers].([BillToCustomerId]) (FK_Sales_Customers_BillToCustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer BillToCustomer { get; set; } // FK_Sales_Customers_BillToCustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_CustomerCategory pointed by [Customers].([CustomerCategoryId]) (FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories)
        /// </summary>
        public virtual Sales_CustomerCategory Sales_CustomerCategory { get; set; } // FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories

        public Sales_Customer()
        {
            Sales_Customers = new List<Sales_Customer>();
            Sales_CustomerTransactions = new List<Sales_CustomerTransaction>();
            Sales_Invoices_BillToCustomerId = new List<Sales_Invoice>();
            Sales_Invoices_CustomerId = new List<Sales_Invoice>();
            Sales_Orders = new List<Sales_Order>();
            Sales_SpecialDeals = new List<Sales_SpecialDeal>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
        }
    }

    // CustomerCategories
    /// <summary>
    /// Categories for customers (ie restaurants, cafes, supermarkets, etc.)
    /// </summary>
    public class Sales_CustomerCategory
    {
        /// <summary>
        /// Numeric ID used for reference to a customer category within the database
        /// </summary>
        public int CustomerCategoryId { get; set; } // CustomerCategoryID (Primary key)

        /// <summary>
        /// Full name of the category that customers can be assigned to
        /// </summary>
        public string CustomerCategoryName { get; set; } // CustomerCategoryName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Sales_Customers where [Customers].[CustomerCategoryID] point to this entity (FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories)
        /// </summary>
        public virtual ICollection<Sales_Customer> Sales_Customers { get; set; } // Customers.FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories

        /// <summary>
        /// Child Sales_SpecialDeals where [SpecialDeals].[CustomerCategoryID] point to this entity (FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories)
        /// </summary>
        public virtual ICollection<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals.FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [CustomerCategories].([LastEditedBy]) (FK_Sales_CustomerCategories_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Sales_CustomerCategories_Application_People

        public Sales_CustomerCategory()
        {
            Sales_Customers = new List<Sales_Customer>();
            Sales_SpecialDeals = new List<Sales_SpecialDeal>();
        }
    }

    // CustomerTransactions
    /// <summary>
    /// All financial transactions that are customer-related
    /// </summary>
    public class Sales_CustomerTransaction
    {
        /// <summary>
        /// Numeric ID used to refer to a customer transaction within the database
        /// </summary>
        public int CustomerTransactionId { get; set; } // CustomerTransactionID (Primary key)

        /// <summary>
        /// Customer for this transaction
        /// </summary>
        public int CustomerId { get; set; } // CustomerID

        /// <summary>
        /// Type of transaction
        /// </summary>
        public int TransactionTypeId { get; set; } // TransactionTypeID

        /// <summary>
        /// ID of an invoice (for transactions associated with an invoice)
        /// </summary>
        public int? InvoiceId { get; set; } // InvoiceID

        /// <summary>
        /// ID of a payment method (for transactions involving payments)
        /// </summary>
        public int? PaymentMethodId { get; set; } // PaymentMethodID

        /// <summary>
        /// Date for the transaction
        /// </summary>
        public DateTime TransactionDate { get; set; } // TransactionDate

        /// <summary>
        /// Transaction amount (excluding tax)
        /// </summary>
        public decimal AmountExcludingTax { get; set; } // AmountExcludingTax

        /// <summary>
        /// Tax amount calculated
        /// </summary>
        public decimal TaxAmount { get; set; } // TaxAmount

        /// <summary>
        /// Transaction amount (including tax)
        /// </summary>
        public decimal TransactionAmount { get; set; } // TransactionAmount

        /// <summary>
        /// Amount still outstanding for this transaction
        /// </summary>
        public decimal OutstandingBalance { get; set; } // OutstandingBalance

        /// <summary>
        /// Date that this transaction was finalized (if it has been)
        /// </summary>
        public DateTime? FinalizationDate { get; set; } // FinalizationDate

        /// <summary>
        /// Is this transaction finalized (invoices, credits and payments have been matched)
        /// </summary>
        public bool? IsFinalized { get; private set; } // IsFinalized
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_PaymentMethod pointed by [CustomerTransactions].([PaymentMethodId]) (FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods)
        /// </summary>
        public virtual Application_PaymentMethod Application_PaymentMethod { get; set; } // FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods

        /// <summary>
        /// Parent Application_Person pointed by [CustomerTransactions].([LastEditedBy]) (FK_Sales_CustomerTransactions_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Sales_CustomerTransactions_Application_People

        /// <summary>
        /// Parent Application_TransactionType pointed by [CustomerTransactions].([TransactionTypeId]) (FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes)
        /// </summary>
        public virtual Application_TransactionType Application_TransactionType { get; set; } // FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes

        /// <summary>
        /// Parent Sales_Customer pointed by [CustomerTransactions].([CustomerId]) (FK_Sales_CustomerTransactions_CustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer Sales_Customer { get; set; } // FK_Sales_CustomerTransactions_CustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_Invoice pointed by [CustomerTransactions].([InvoiceId]) (FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices)
        /// </summary>
        public virtual Sales_Invoice Sales_Invoice { get; set; } // FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices

        public Sales_CustomerTransaction()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // Invoices
    /// <summary>
    /// Details of customer invoices
    /// </summary>
    public class Sales_Invoice
    {
        /// <summary>
        /// Numeric ID used for reference to an invoice within the database
        /// </summary>
        public int InvoiceId { get; set; } // InvoiceID (Primary key)

        /// <summary>
        /// Customer for this invoice
        /// </summary>
        public int CustomerId { get; set; } // CustomerID

        /// <summary>
        /// Bill to customer for this invoice (invoices might be billed to a head office)
        /// </summary>
        public int BillToCustomerId { get; set; } // BillToCustomerID

        /// <summary>
        /// Sales order (if any) for this invoice
        /// </summary>
        public int? OrderId { get; set; } // OrderID

        /// <summary>
        /// How these stock items are beign delivered
        /// </summary>
        public int DeliveryMethodId { get; set; } // DeliveryMethodID

        /// <summary>
        /// Customer contact for this invoice
        /// </summary>
        public int ContactPersonId { get; set; } // ContactPersonID

        /// <summary>
        /// Customer accounts contact for this invoice
        /// </summary>
        public int AccountsPersonId { get; set; } // AccountsPersonID

        /// <summary>
        /// Salesperson for this invoice
        /// </summary>
        public int SalespersonPersonId { get; set; } // SalespersonPersonID

        /// <summary>
        /// Person who packed this shipment (or checked the packing)
        /// </summary>
        public int PackedByPersonId { get; set; } // PackedByPersonID

        /// <summary>
        /// Date that this invoice was raised
        /// </summary>
        public DateTime InvoiceDate { get; set; } // InvoiceDate

        /// <summary>
        /// Purchase Order Number received from customer
        /// </summary>
        public string CustomerPurchaseOrderNumber { get; set; } // CustomerPurchaseOrderNumber (length: 20)

        /// <summary>
        /// Is this a credit note (rather than an invoice)
        /// </summary>
        public bool IsCreditNote { get; set; } // IsCreditNote

        /// <summary>
        /// Reason that this credit note needed to be generated (if applicable)
        /// </summary>
        public string CreditNoteReason { get; set; } // CreditNoteReason

        /// <summary>
        /// Any comments related to this invoice (sent to customer)
        /// </summary>
        public string Comments { get; set; } // Comments

        /// <summary>
        /// Any comments related to delivery (sent to customer)
        /// </summary>
        public string DeliveryInstructions { get; set; } // DeliveryInstructions

        /// <summary>
        /// Any internal comments related to this invoice (not sent to the customer)
        /// </summary>
        public string InternalComments { get; set; } // InternalComments

        /// <summary>
        /// Total number of dry packages (information for the delivery driver)
        /// </summary>
        public int TotalDryItems { get; set; } // TotalDryItems

        /// <summary>
        /// Total number of chiller packages (information for the delivery driver)
        /// </summary>
        public int TotalChillerItems { get; set; } // TotalChillerItems

        /// <summary>
        /// Delivery run for this shipment
        /// </summary>
        public string DeliveryRun { get; set; } // DeliveryRun (length: 5)

        /// <summary>
        /// Position in the delivery run for this shipment
        /// </summary>
        public string RunPosition { get; set; } // RunPosition (length: 5)

        /// <summary>
        /// JSON-structured data returned from delivery devices for deliveries made directly by the organization
        /// </summary>
        public string ReturnedDeliveryData { get; set; } // ReturnedDeliveryData

        /// <summary>
        /// Confirmed delivery date and time promoted from JSON delivery data
        /// </summary>
        public DateTime? ConfirmedDeliveryTime { get; private set; } // ConfirmedDeliveryTime

        /// <summary>
        /// Confirmed receiver promoted from JSON delivery data
        /// </summary>
        public string ConfirmedReceivedBy { get; private set; } // ConfirmedReceivedBy (length: 4000)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Reverse navigation

        /// <summary>
        /// Child Sales_CustomerTransactions where [CustomerTransactions].[InvoiceID] point to this entity (FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices)
        /// </summary>
        public virtual ICollection<Sales_CustomerTransaction> Sales_CustomerTransactions { get; set; } // CustomerTransactions.FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices

        /// <summary>
        /// Child Sales_InvoiceLines where [InvoiceLines].[InvoiceID] point to this entity (FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices)
        /// </summary>
        public virtual ICollection<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines.FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[InvoiceID] point to this entity (FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices

        // Foreign keys

        /// <summary>
        /// Parent Application_DeliveryMethod pointed by [Invoices].([DeliveryMethodId]) (FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods)
        /// </summary>
        public virtual Application_DeliveryMethod Application_DeliveryMethod { get; set; } // FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods

        /// <summary>
        /// Parent Application_Person pointed by [Invoices].([AccountsPersonId]) (FK_Sales_Invoices_AccountsPersonID_Application_People)
        /// </summary>
        public virtual Application_Person AccountsPerson { get; set; } // FK_Sales_Invoices_AccountsPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Invoices].([LastEditedBy]) (FK_Sales_Invoices_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person_LastEditedBy { get; set; } // FK_Sales_Invoices_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Invoices].([ContactPersonId]) (FK_Sales_Invoices_ContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person ContactPerson { get; set; } // FK_Sales_Invoices_ContactPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Invoices].([PackedByPersonId]) (FK_Sales_Invoices_PackedByPersonID_Application_People)
        /// </summary>
        public virtual Application_Person PackedByPerson { get; set; } // FK_Sales_Invoices_PackedByPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Invoices].([SalespersonPersonId]) (FK_Sales_Invoices_SalespersonPersonID_Application_People)
        /// </summary>
        public virtual Application_Person SalespersonPerson { get; set; } // FK_Sales_Invoices_SalespersonPersonID_Application_People

        /// <summary>
        /// Parent Sales_Customer pointed by [Invoices].([BillToCustomerId]) (FK_Sales_Invoices_BillToCustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer BillToCustomer { get; set; } // FK_Sales_Invoices_BillToCustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_Customer pointed by [Invoices].([CustomerId]) (FK_Sales_Invoices_CustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer Customer { get; set; } // FK_Sales_Invoices_CustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_Order pointed by [Invoices].([OrderId]) (FK_Sales_Invoices_OrderID_Sales_Orders)
        /// </summary>
        public virtual Sales_Order Sales_Order { get; set; } // FK_Sales_Invoices_OrderID_Sales_Orders

        public Sales_Invoice()
        {
            LastEditedWhen = DateTime.Now;
            Sales_CustomerTransactions = new List<Sales_CustomerTransaction>();
            Sales_InvoiceLines = new List<Sales_InvoiceLine>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
        }
    }

    // InvoiceLines
    /// <summary>
    /// Detail lines from customer invoices
    /// </summary>
    public class Sales_InvoiceLine
    {
        /// <summary>
        /// Numeric ID used for reference to a line on an invoice within the database
        /// </summary>
        public int InvoiceLineId { get; set; } // InvoiceLineID (Primary key)

        /// <summary>
        /// Invoice that this line is associated with
        /// </summary>
        public int InvoiceId { get; set; } // InvoiceID

        /// <summary>
        /// Stock item for this invoice line
        /// </summary>
        public int StockItemId { get; set; } // StockItemID

        /// <summary>
        /// Description of the item supplied (Usually the stock item name but can be overridden)
        /// </summary>
        public string Description { get; set; } // Description (length: 100)

        /// <summary>
        /// Type of package supplied
        /// </summary>
        public int PackageTypeId { get; set; } // PackageTypeID

        /// <summary>
        /// Quantity supplied
        /// </summary>
        public int Quantity { get; set; } // Quantity

        /// <summary>
        /// Unit price charged
        /// </summary>
        public decimal? UnitPrice { get; set; } // UnitPrice

        /// <summary>
        /// Tax rate to be applied
        /// </summary>
        public decimal TaxRate { get; set; } // TaxRate

        /// <summary>
        /// Tax amount calculated
        /// </summary>
        public decimal TaxAmount { get; set; } // TaxAmount

        /// <summary>
        /// Profit made on this line item at current cost price
        /// </summary>
        public decimal LineProfit { get; set; } // LineProfit

        /// <summary>
        /// Extended line price charged
        /// </summary>
        public decimal ExtendedPrice { get; set; } // ExtendedPrice
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [InvoiceLines].([LastEditedBy]) (FK_Sales_InvoiceLines_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Sales_InvoiceLines_Application_People

        /// <summary>
        /// Parent Sales_Invoice pointed by [InvoiceLines].([InvoiceId]) (FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices)
        /// </summary>
        public virtual Sales_Invoice Sales_Invoice { get; set; } // FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices

        /// <summary>
        /// Parent Warehouse_PackageType pointed by [InvoiceLines].([PackageTypeId]) (FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes)
        /// </summary>
        public virtual Warehouse_PackageType Warehouse_PackageType { get; set; } // FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [InvoiceLines].([StockItemId]) (FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems

        public Sales_InvoiceLine()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // Orders
    /// <summary>
    /// Detail of customer orders
    /// </summary>
    public class Sales_Order
    {
        /// <summary>
        /// Numeric ID used for reference to an order within the database
        /// </summary>
        public int OrderId { get; set; } // OrderID (Primary key)

        /// <summary>
        /// Customer for this order
        /// </summary>
        public int CustomerId { get; set; } // CustomerID

        /// <summary>
        /// Salesperson for this order
        /// </summary>
        public int SalespersonPersonId { get; set; } // SalespersonPersonID

        /// <summary>
        /// Person who picked this shipment
        /// </summary>
        public int? PickedByPersonId { get; set; } // PickedByPersonID

        /// <summary>
        /// Customer contact for this order
        /// </summary>
        public int ContactPersonId { get; set; } // ContactPersonID

        /// <summary>
        /// If this order is a backorder, this column holds the original order number
        /// </summary>
        public int? BackorderOrderId { get; set; } // BackorderOrderID

        /// <summary>
        /// Date that this order was raised
        /// </summary>
        public DateTime OrderDate { get; set; } // OrderDate

        /// <summary>
        /// Expected delivery date
        /// </summary>
        public DateTime ExpectedDeliveryDate { get; set; } // ExpectedDeliveryDate

        /// <summary>
        /// Purchase Order Number received from customer
        /// </summary>
        public string CustomerPurchaseOrderNumber { get; set; } // CustomerPurchaseOrderNumber (length: 20)

        /// <summary>
        /// If items cannot be supplied are they backordered?
        /// </summary>
        public bool IsUndersupplyBackordered { get; set; } // IsUndersupplyBackordered

        /// <summary>
        /// Any comments related to this order (sent to customer)
        /// </summary>
        public string Comments { get; set; } // Comments

        /// <summary>
        /// Any comments related to order delivery (sent to customer)
        /// </summary>
        public string DeliveryInstructions { get; set; } // DeliveryInstructions

        /// <summary>
        /// Any internal comments related to this order (not sent to the customer)
        /// </summary>
        public string InternalComments { get; set; } // InternalComments

        /// <summary>
        /// When was picking of the entire order completed?
        /// </summary>
        public DateTime? PickingCompletedWhen { get; set; } // PickingCompletedWhen
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Reverse navigation

        /// <summary>
        /// Child Sales_Invoices where [Invoices].[OrderID] point to this entity (FK_Sales_Invoices_OrderID_Sales_Orders)
        /// </summary>
        public virtual ICollection<Sales_Invoice> Sales_Invoices { get; set; } // Invoices.FK_Sales_Invoices_OrderID_Sales_Orders

        /// <summary>
        /// Child Sales_Orders where [Orders].[BackorderOrderID] point to this entity (FK_Sales_Orders_BackorderOrderID_Sales_Orders)
        /// </summary>
        public virtual ICollection<Sales_Order> Sales_Orders { get; set; } // Orders.FK_Sales_Orders_BackorderOrderID_Sales_Orders

        /// <summary>
        /// Child Sales_OrderLines where [OrderLines].[OrderID] point to this entity (FK_Sales_OrderLines_OrderID_Sales_Orders)
        /// </summary>
        public virtual ICollection<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines.FK_Sales_OrderLines_OrderID_Sales_Orders

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [Orders].([LastEditedBy]) (FK_Sales_Orders_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person_LastEditedBy { get; set; } // FK_Sales_Orders_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Orders].([ContactPersonId]) (FK_Sales_Orders_ContactPersonID_Application_People)
        /// </summary>
        public virtual Application_Person ContactPerson { get; set; } // FK_Sales_Orders_ContactPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Orders].([PickedByPersonId]) (FK_Sales_Orders_PickedByPersonID_Application_People)
        /// </summary>
        public virtual Application_Person PickedByPerson { get; set; } // FK_Sales_Orders_PickedByPersonID_Application_People

        /// <summary>
        /// Parent Application_Person pointed by [Orders].([SalespersonPersonId]) (FK_Sales_Orders_SalespersonPersonID_Application_People)
        /// </summary>
        public virtual Application_Person SalespersonPerson { get; set; } // FK_Sales_Orders_SalespersonPersonID_Application_People

        /// <summary>
        /// Parent Sales_Customer pointed by [Orders].([CustomerId]) (FK_Sales_Orders_CustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer Sales_Customer { get; set; } // FK_Sales_Orders_CustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_Order pointed by [Orders].([BackorderOrderId]) (FK_Sales_Orders_BackorderOrderID_Sales_Orders)
        /// </summary>
        public virtual Sales_Order BackorderOrder { get; set; } // FK_Sales_Orders_BackorderOrderID_Sales_Orders

        public Sales_Order()
        {
            LastEditedWhen = DateTime.Now;
            Sales_Invoices = new List<Sales_Invoice>();
            Sales_OrderLines = new List<Sales_OrderLine>();
            Sales_Orders = new List<Sales_Order>();
        }
    }

    // OrderLines
    /// <summary>
    /// Detail lines from customer orders
    /// </summary>
    public class Sales_OrderLine
    {
        /// <summary>
        /// Numeric ID used for reference to a line on an Order within the database
        /// </summary>
        public int OrderLineId { get; set; } // OrderLineID (Primary key)

        /// <summary>
        /// Order that this line is associated with
        /// </summary>
        public int OrderId { get; set; } // OrderID

        /// <summary>
        /// Stock item for this order line (FK not indexed as separate index exists)
        /// </summary>
        public int StockItemId { get; set; } // StockItemID

        /// <summary>
        /// Description of the item supplied (Usually the stock item name but can be overridden)
        /// </summary>
        public string Description { get; set; } // Description (length: 100)

        /// <summary>
        /// Type of package to be supplied
        /// </summary>
        public int PackageTypeId { get; set; } // PackageTypeID

        /// <summary>
        /// Quantity to be supplied
        /// </summary>
        public int Quantity { get; set; } // Quantity

        /// <summary>
        /// Unit price to be charged
        /// </summary>
        public decimal? UnitPrice { get; set; } // UnitPrice

        /// <summary>
        /// Tax rate to be applied
        /// </summary>
        public decimal TaxRate { get; set; } // TaxRate

        /// <summary>
        /// Quantity picked from stock
        /// </summary>
        public int PickedQuantity { get; set; } // PickedQuantity

        /// <summary>
        /// When was picking of this line completed?
        /// </summary>
        public DateTime? PickingCompletedWhen { get; set; } // PickingCompletedWhen
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [OrderLines].([LastEditedBy]) (FK_Sales_OrderLines_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Sales_OrderLines_Application_People

        /// <summary>
        /// Parent Sales_Order pointed by [OrderLines].([OrderId]) (FK_Sales_OrderLines_OrderID_Sales_Orders)
        /// </summary>
        public virtual Sales_Order Sales_Order { get; set; } // FK_Sales_OrderLines_OrderID_Sales_Orders

        /// <summary>
        /// Parent Warehouse_PackageType pointed by [OrderLines].([PackageTypeId]) (FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes)
        /// </summary>
        public virtual Warehouse_PackageType Warehouse_PackageType { get; set; } // FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [OrderLines].([StockItemId]) (FK_Sales_OrderLines_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // FK_Sales_OrderLines_StockItemID_Warehouse_StockItems

        public Sales_OrderLine()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // SpecialDeals
    /// <summary>
    /// Special pricing (can include fixed prices, discount $ or discount %)
    /// </summary>
    public class Sales_SpecialDeal
    {
        /// <summary>
        /// ID (sequence based) for a special deal
        /// </summary>
        public int SpecialDealId { get; set; } // SpecialDealID (Primary key)

        /// <summary>
        /// Stock item that the deal applies to (if NULL, then only discounts are permitted not unit prices)
        /// </summary>
        public int? StockItemId { get; set; } // StockItemID

        /// <summary>
        /// ID of the customer that the special pricing applies to (if NULL then all customers)
        /// </summary>
        public int? CustomerId { get; set; } // CustomerID

        /// <summary>
        /// ID of the buying group that the special pricing applies to (optional)
        /// </summary>
        public int? BuyingGroupId { get; set; } // BuyingGroupID

        /// <summary>
        /// ID of the customer category that the special pricing applies to (optional)
        /// </summary>
        public int? CustomerCategoryId { get; set; } // CustomerCategoryID

        /// <summary>
        /// ID of the stock group that the special pricing applies to (optional)
        /// </summary>
        public int? StockGroupId { get; set; } // StockGroupID

        /// <summary>
        /// Description of the special deal
        /// </summary>
        public string DealDescription { get; set; } // DealDescription (length: 30)

        /// <summary>
        /// Date that the special pricing starts from
        /// </summary>
        public DateTime StartDate { get; set; } // StartDate

        /// <summary>
        /// Date that the special pricing ends on
        /// </summary>
        public DateTime EndDate { get; set; } // EndDate

        /// <summary>
        /// Discount per unit to be applied to sale price (optional)
        /// </summary>
        public decimal? DiscountAmount { get; set; } // DiscountAmount

        /// <summary>
        /// Discount percentage per unit to be applied to sale price (optional)
        /// </summary>
        public decimal? DiscountPercentage { get; set; } // DiscountPercentage

        /// <summary>
        /// Special price per unit to be applied instead of sale price (optional)
        /// </summary>
        public decimal? UnitPrice { get; set; } // UnitPrice
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [SpecialDeals].([LastEditedBy]) (FK_Sales_SpecialDeals_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Sales_SpecialDeals_Application_People

        /// <summary>
        /// Parent Sales_BuyingGroup pointed by [SpecialDeals].([BuyingGroupId]) (FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups)
        /// </summary>
        public virtual Sales_BuyingGroup Sales_BuyingGroup { get; set; } // FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups

        /// <summary>
        /// Parent Sales_Customer pointed by [SpecialDeals].([CustomerId]) (FK_Sales_SpecialDeals_CustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer Sales_Customer { get; set; } // FK_Sales_SpecialDeals_CustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_CustomerCategory pointed by [SpecialDeals].([CustomerCategoryId]) (FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories)
        /// </summary>
        public virtual Sales_CustomerCategory Sales_CustomerCategory { get; set; } // FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories

        /// <summary>
        /// Parent Warehouse_StockGroup pointed by [SpecialDeals].([StockGroupId]) (FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups)
        /// </summary>
        public virtual Warehouse_StockGroup Warehouse_StockGroup { get; set; } // FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [SpecialDeals].([StockItemId]) (FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems

        public Sales_SpecialDeal()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // ColdRoomTemperatures
    public class Warehouse_ColdRoomTemperature
    {
        public long ColdRoomTemperatureId { get; set; } // ColdRoomTemperatureID (Primary key)
        public int ColdRoomSensorNumber { get; set; } // ColdRoomSensorNumber
        public DateTime RecordedWhen { get; set; } // RecordedWhen
        public decimal Temperature { get; set; } // Temperature
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo
    }

    // Colors
    /// <summary>
    /// Stock items can (optionally) have colors
    /// </summary>
    public class Warehouse_Color
    {
        /// <summary>
        /// Numeric ID used for reference to a color within the database
        /// </summary>
        public int ColorId { get; set; } // ColorID (Primary key)

        /// <summary>
        /// Full name of a color that can be used to describe stock items
        /// </summary>
        public string ColorName { get; set; } // ColorName (length: 20)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Warehouse_StockItems where [StockItems].[ColorID] point to this entity (FK_Warehouse_StockItems_ColorID_Warehouse_Colors)
        /// </summary>
        public virtual ICollection<Warehouse_StockItem> Warehouse_StockItems { get; set; } // StockItems.FK_Warehouse_StockItems_ColorID_Warehouse_Colors

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [Colors].([LastEditedBy]) (FK_Warehouse_Colors_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_Colors_Application_People

        public Warehouse_Color()
        {
            Warehouse_StockItems = new List<Warehouse_StockItem>();
        }
    }

    // PackageTypes
    /// <summary>
    /// Ways that stock items can be packaged (ie: each, box, carton, pallet, kg, etc.
    /// </summary>
    public class Warehouse_PackageType
    {
        /// <summary>
        /// Numeric ID used for reference to a package type within the database
        /// </summary>
        public int PackageTypeId { get; set; } // PackageTypeID (Primary key)

        /// <summary>
        /// Full name of package types that stock items can be purchased in or sold in
        /// </summary>
        public string PackageTypeName { get; set; } // PackageTypeName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderLines where [PurchaseOrderLines].[PackageTypeID] point to this entity (FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines.FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes

        /// <summary>
        /// Child Sales_InvoiceLines where [InvoiceLines].[PackageTypeID] point to this entity (FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes)
        /// </summary>
        public virtual ICollection<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines.FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes

        /// <summary>
        /// Child Sales_OrderLines where [OrderLines].[PackageTypeID] point to this entity (FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes)
        /// </summary>
        public virtual ICollection<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines.FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes

        /// <summary>
        /// Child Warehouse_StockItems where [StockItems].[OuterPackageID] point to this entity (FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes)
        /// </summary>
        public virtual ICollection<Warehouse_StockItem> Warehouse_StockItems_OuterPackageId { get; set; } // StockItems.FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes

        /// <summary>
        /// Child Warehouse_StockItems where [StockItems].[UnitPackageID] point to this entity (FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes)
        /// </summary>
        public virtual ICollection<Warehouse_StockItem> Warehouse_StockItems_UnitPackageId { get; set; } // StockItems.FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [PackageTypes].([LastEditedBy]) (FK_Warehouse_PackageTypes_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_PackageTypes_Application_People

        public Warehouse_PackageType()
        {
            Sales_InvoiceLines = new List<Sales_InvoiceLine>();
            Sales_OrderLines = new List<Sales_OrderLine>();
            Purchasing_PurchaseOrderLines = new List<Purchasing_PurchaseOrderLine>();
            Warehouse_StockItems_OuterPackageId = new List<Warehouse_StockItem>();
            Warehouse_StockItems_UnitPackageId = new List<Warehouse_StockItem>();
        }
    }

    // StockGroups
    /// <summary>
    /// Groups for categorizing stock items (ie: novelties, toys, edible novelties, etc.)
    /// </summary>
    public class Warehouse_StockGroup
    {
        /// <summary>
        /// Numeric ID used for reference to a stock group within the database
        /// </summary>
        public int StockGroupId { get; set; } // StockGroupID (Primary key)

        /// <summary>
        /// Full name of groups used to categorize stock items
        /// </summary>
        public string StockGroupName { get; set; } // StockGroupName (length: 50)
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Sales_SpecialDeals where [SpecialDeals].[StockGroupID] point to this entity (FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups)
        /// </summary>
        public virtual ICollection<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals.FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups

        /// <summary>
        /// Child Warehouse_StockItemStockGroups where [StockItemStockGroups].[StockGroupID] point to this entity (FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemStockGroup> Warehouse_StockItemStockGroups { get; set; } // StockItemStockGroups.FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [StockGroups].([LastEditedBy]) (FK_Warehouse_StockGroups_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_StockGroups_Application_People

        public Warehouse_StockGroup()
        {
            Sales_SpecialDeals = new List<Sales_SpecialDeal>();
            Warehouse_StockItemStockGroups = new List<Warehouse_StockItemStockGroup>();
        }
    }

    // StockItems
    /// <summary>
    /// Main entity table for stock items
    /// </summary>
    public class Warehouse_StockItem
    {
        /// <summary>
        /// Numeric ID used for reference to a stock item within the database
        /// </summary>
        public int StockItemId { get; set; } // StockItemID (Primary key)

        /// <summary>
        /// Full name of a stock item (but not a full description)
        /// </summary>
        public string StockItemName { get; set; } // StockItemName (length: 100)

        /// <summary>
        /// Usual supplier for this stock item
        /// </summary>
        public int SupplierId { get; set; } // SupplierID

        /// <summary>
        /// Color (optional) for this stock item
        /// </summary>
        public int? ColorId { get; set; } // ColorID

        /// <summary>
        /// Usual package for selling units of this stock item
        /// </summary>
        public int UnitPackageId { get; set; } // UnitPackageID

        /// <summary>
        /// Usual package for selling outers of this stock item (ie cartons, boxes, etc.)
        /// </summary>
        public int OuterPackageId { get; set; } // OuterPackageID

        /// <summary>
        /// Brand for the stock item (if the item is branded)
        /// </summary>
        public string Brand { get; set; } // Brand (length: 50)

        /// <summary>
        /// Size of this item (eg: 100mm)
        /// </summary>
        public string Size { get; set; } // Size (length: 20)

        /// <summary>
        /// Number of days typically taken from order to receipt of this stock item
        /// </summary>
        public int LeadTimeDays { get; set; } // LeadTimeDays

        /// <summary>
        /// Quantity of the stock item in an outer package
        /// </summary>
        public int QuantityPerOuter { get; set; } // QuantityPerOuter

        /// <summary>
        /// Does this stock item need to be in a chiller?
        /// </summary>
        public bool IsChillerStock { get; set; } // IsChillerStock

        /// <summary>
        /// Barcode for this stock item
        /// </summary>
        public string Barcode { get; set; } // Barcode (length: 50)

        /// <summary>
        /// Tax rate to be applied
        /// </summary>
        public decimal TaxRate { get; set; } // TaxRate

        /// <summary>
        /// Selling price (ex-tax) for one unit of this product
        /// </summary>
        public decimal UnitPrice { get; set; } // UnitPrice

        /// <summary>
        /// Recommended retail price for this stock item
        /// </summary>
        public decimal? RecommendedRetailPrice { get; set; } // RecommendedRetailPrice

        /// <summary>
        /// Typical weight for one unit of this product (packaged)
        /// </summary>
        public decimal TypicalWeightPerUnit { get; set; } // TypicalWeightPerUnit

        /// <summary>
        /// Marketing comments for this stock item (shared outside the organization)
        /// </summary>
        public string MarketingComments { get; set; } // MarketingComments

        /// <summary>
        /// Internal comments (not exposed outside organization)
        /// </summary>
        public string InternalComments { get; set; } // InternalComments

        /// <summary>
        /// Photo of the product
        /// </summary>
        public byte[] Photo { get; set; } // Photo

        /// <summary>
        /// Custom fields added by system users
        /// </summary>
        public string CustomFields { get; set; } // CustomFields

        /// <summary>
        /// Advertising tags associated with this stock item (JSON array retrieved from CustomFields)
        /// </summary>
        public string Tags { get; private set; } // Tags

        /// <summary>
        /// Combination of columns used by full text search
        /// </summary>
        public string SearchDetails { get; private set; } // SearchDetails
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime ValidFrom { get; set; } // ValidFrom
        public DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderLines where [PurchaseOrderLines].[StockItemID] point to this entity (FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual ICollection<Purchasing_PurchaseOrderLine> Purchasing_PurchaseOrderLines { get; set; } // PurchaseOrderLines.FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems

        /// <summary>
        /// Child Sales_InvoiceLines where [InvoiceLines].[StockItemID] point to this entity (FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual ICollection<Sales_InvoiceLine> Sales_InvoiceLines { get; set; } // InvoiceLines.FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems

        /// <summary>
        /// Child Sales_OrderLines where [OrderLines].[StockItemID] point to this entity (FK_Sales_OrderLines_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual ICollection<Sales_OrderLine> Sales_OrderLines { get; set; } // OrderLines.FK_Sales_OrderLines_StockItemID_Warehouse_StockItems

        /// <summary>
        /// Child Sales_SpecialDeals where [SpecialDeals].[StockItemID] point to this entity (FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual ICollection<Sales_SpecialDeal> Sales_SpecialDeals { get; set; } // SpecialDeals.FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems

        /// <summary>
        /// Child Warehouse_StockItemStockGroups where [StockItemStockGroups].[StockItemID] point to this entity (FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemStockGroup> Warehouse_StockItemStockGroups { get; set; } // StockItemStockGroups.FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems

        /// <summary>
        /// Child Warehouse_StockItemTransactions where [StockItemTransactions].[StockItemID] point to this entity (FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual ICollection<Warehouse_StockItemTransaction> Warehouse_StockItemTransactions { get; set; } // StockItemTransactions.FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems

        /// <summary>
        /// Parent (One-to-One) Warehouse_StockItem pointed by [StockItemHoldings].[StockItemID] (PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItemHolding Warehouse_StockItemHolding { get; set; } // StockItemHoldings.PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [StockItems].([LastEditedBy]) (FK_Warehouse_StockItems_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_StockItems_Application_People

        /// <summary>
        /// Parent Purchasing_Supplier pointed by [StockItems].([SupplierId]) (FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual Purchasing_Supplier Purchasing_Supplier { get; set; } // FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers

        /// <summary>
        /// Parent Warehouse_Color pointed by [StockItems].([ColorId]) (FK_Warehouse_StockItems_ColorID_Warehouse_Colors)
        /// </summary>
        public virtual Warehouse_Color Warehouse_Color { get; set; } // FK_Warehouse_StockItems_ColorID_Warehouse_Colors

        /// <summary>
        /// Parent Warehouse_PackageType pointed by [StockItems].([OuterPackageId]) (FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes)
        /// </summary>
        public virtual Warehouse_PackageType OuterPackage { get; set; } // FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes

        /// <summary>
        /// Parent Warehouse_PackageType pointed by [StockItems].([UnitPackageId]) (FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes)
        /// </summary>
        public virtual Warehouse_PackageType UnitPackage { get; set; } // FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes

        public Warehouse_StockItem()
        {
            Sales_InvoiceLines = new List<Sales_InvoiceLine>();
            Sales_OrderLines = new List<Sales_OrderLine>();
            Purchasing_PurchaseOrderLines = new List<Purchasing_PurchaseOrderLine>();
            Sales_SpecialDeals = new List<Sales_SpecialDeal>();
            Warehouse_StockItemStockGroups = new List<Warehouse_StockItemStockGroup>();
            Warehouse_StockItemTransactions = new List<Warehouse_StockItemTransaction>();
        }
    }

    // StockItemHoldings
    /// <summary>
    /// Non-temporal attributes for stock items
    /// </summary>
    public class Warehouse_StockItemHolding
    {
        /// <summary>
        /// ID of the stock item that this holding relates to (this table holds non-temporal columns for stock)
        /// </summary>
        public int StockItemId { get; set; } // StockItemID (Primary key)

        /// <summary>
        /// Quantity currently on hand (if tracked)
        /// </summary>
        public int QuantityOnHand { get; set; } // QuantityOnHand

        /// <summary>
        /// Bin location (ie location of this stock item within the depot)
        /// </summary>
        public string BinLocation { get; set; } // BinLocation (length: 20)

        /// <summary>
        /// Quantity at last stocktake (if tracked)
        /// </summary>
        public int LastStocktakeQuantity { get; set; } // LastStocktakeQuantity

        /// <summary>
        /// Unit cost price the last time this stock item was purchased
        /// </summary>
        public decimal LastCostPrice { get; set; } // LastCostPrice

        /// <summary>
        /// Quantity below which reordering should take place
        /// </summary>
        public int ReorderLevel { get; set; } // ReorderLevel

        /// <summary>
        /// Typical quantity ordered
        /// </summary>
        public int TargetStockLevel { get; set; } // TargetStockLevel
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [StockItemHoldings].([LastEditedBy]) (FK_Warehouse_StockItemHoldings_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_StockItemHoldings_Application_People

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [StockItemHoldings].([StockItemId]) (PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems

        public Warehouse_StockItemHolding()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // StockItemStockGroups
    /// <summary>
    /// Which stock items are in which stock groups
    /// </summary>
    public class Warehouse_StockItemStockGroup
    {
        /// <summary>
        /// Internal reference for this linking row
        /// </summary>
        public int StockItemStockGroupId { get; set; } // StockItemStockGroupID (Primary key)

        /// <summary>
        /// Stock item assigned to this stock group (FK indexed via unique constraint)
        /// </summary>
        public int StockItemId { get; set; } // StockItemID

        /// <summary>
        /// StockGroup assigned to this stock item (FK indexed via unique constraint)
        /// </summary>
        public int StockGroupId { get; set; } // StockGroupID
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [StockItemStockGroups].([LastEditedBy]) (FK_Warehouse_StockItemStockGroups_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_StockItemStockGroups_Application_People

        /// <summary>
        /// Parent Warehouse_StockGroup pointed by [StockItemStockGroups].([StockGroupId]) (FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups)
        /// </summary>
        public virtual Warehouse_StockGroup Warehouse_StockGroup { get; set; } // FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [StockItemStockGroups].([StockItemId]) (FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems

        public Warehouse_StockItemStockGroup()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // StockItemTransactions
    /// <summary>
    /// Transactions covering all movements of all stock items
    /// </summary>
    public class Warehouse_StockItemTransaction
    {
        /// <summary>
        /// Numeric ID used to refer to a stock item transaction within the database
        /// </summary>
        public int StockItemTransactionId { get; set; } // StockItemTransactionID (Primary key)

        /// <summary>
        /// StockItem for this transaction
        /// </summary>
        public int StockItemId { get; set; } // StockItemID

        /// <summary>
        /// Type of transaction
        /// </summary>
        public int TransactionTypeId { get; set; } // TransactionTypeID

        /// <summary>
        /// Customer for this transaction (if applicable)
        /// </summary>
        public int? CustomerId { get; set; } // CustomerID

        /// <summary>
        /// ID of an invoice (for transactions associated with an invoice)
        /// </summary>
        public int? InvoiceId { get; set; } // InvoiceID

        /// <summary>
        /// Supplier for this stock transaction (if applicable)
        /// </summary>
        public int? SupplierId { get; set; } // SupplierID

        /// <summary>
        /// ID of an purchase order (for transactions associated with a purchase order)
        /// </summary>
        public int? PurchaseOrderId { get; set; } // PurchaseOrderID

        /// <summary>
        /// Date and time when the transaction occurred
        /// </summary>
        public DateTime TransactionOccurredWhen { get; set; } // TransactionOccurredWhen

        /// <summary>
        /// Quantity of stock movement (positive is incoming stock, negative is outgoing)
        /// </summary>
        public decimal Quantity { get; set; } // Quantity
        public int LastEditedBy { get; set; } // LastEditedBy
        public DateTime LastEditedWhen { get; set; } // LastEditedWhen

        // Foreign keys

        /// <summary>
        /// Parent Application_Person pointed by [StockItemTransactions].([LastEditedBy]) (FK_Warehouse_StockItemTransactions_Application_People)
        /// </summary>
        public virtual Application_Person Application_Person { get; set; } // FK_Warehouse_StockItemTransactions_Application_People

        /// <summary>
        /// Parent Application_TransactionType pointed by [StockItemTransactions].([TransactionTypeId]) (FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes)
        /// </summary>
        public virtual Application_TransactionType Application_TransactionType { get; set; } // FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes

        /// <summary>
        /// Parent Purchasing_PurchaseOrder pointed by [StockItemTransactions].([PurchaseOrderId]) (FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders)
        /// </summary>
        public virtual Purchasing_PurchaseOrder Purchasing_PurchaseOrder { get; set; } // FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders

        /// <summary>
        /// Parent Purchasing_Supplier pointed by [StockItemTransactions].([SupplierId]) (FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers)
        /// </summary>
        public virtual Purchasing_Supplier Purchasing_Supplier { get; set; } // FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers

        /// <summary>
        /// Parent Sales_Customer pointed by [StockItemTransactions].([CustomerId]) (FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers)
        /// </summary>
        public virtual Sales_Customer Sales_Customer { get; set; } // FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers

        /// <summary>
        /// Parent Sales_Invoice pointed by [StockItemTransactions].([InvoiceId]) (FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices)
        /// </summary>
        public virtual Sales_Invoice Sales_Invoice { get; set; } // FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices

        /// <summary>
        /// Parent Warehouse_StockItem pointed by [StockItemTransactions].([StockItemId]) (FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems)
        /// </summary>
        public virtual Warehouse_StockItem Warehouse_StockItem { get; set; } // FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems

        public Warehouse_StockItemTransaction()
        {
            LastEditedWhen = DateTime.Now;
        }
    }

    // VehicleTemperatures
    public class Warehouse_VehicleTemperature
    {
        public long VehicleTemperatureId { get; set; } // VehicleTemperatureID (Primary key)
        public string VehicleRegistration { get; set; } // VehicleRegistration (length: 20)
        public int ChillerSensorNumber { get; set; } // ChillerSensorNumber
        public DateTime RecordedWhen { get; set; } // RecordedWhen
        public decimal Temperature { get; set; } // Temperature
        public string FullSensorData { get; set; } // FullSensorData (length: 1000)
        public bool IsCompressed { get; set; } // IsCompressed
        public byte[] CompressedSensorData { get; set; } // CompressedSensorData
    }


    #endregion

    #region POCO Configuration

    // Cities
    public class Application_CityConfiguration : IEntityTypeConfiguration<Application_City>
    {
        public void Configure(EntityTypeBuilder<Application_City> builder)
        {
            builder.ToTable("Cities", "Application");
            builder.HasKey(x => x.CityId).HasName("PK_Application_Cities").IsClustered();

            builder.Property(x => x.CityId).HasColumnName(@"CityID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[CityID]");
            builder.Property(x => x.CityName).HasColumnName(@"CityName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LatestRecordedPopulation).HasColumnName(@"LatestRecordedPopulation").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_Cities).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_Cities_Application_People");
            builder.HasOne(a => a.Application_StateProvince).WithMany(b => b.Application_Cities).HasForeignKey(c => c.StateProvinceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_Cities_StateProvinceID_Application_StateProvinces");

            builder.HasIndex(x => x.StateProvinceId).HasDatabaseName("FK_Application_Cities_StateProvinceID");
        }
    }

    // Countries
    public class Application_CountryConfiguration : IEntityTypeConfiguration<Application_Country>
    {
        public void Configure(EntityTypeBuilder<Application_Country> builder)
        {
            builder.ToTable("Countries", "Application");
            builder.HasKey(x => x.CountryId).HasName("PK_Application_Countries").IsClustered();

            builder.Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[CountryID]");
            builder.Property(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.FormalName).HasColumnName(@"FormalName").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.IsoAlpha3Code).HasColumnName(@"IsoAlpha3Code").HasColumnType("nvarchar(3)").IsRequired(false).HasMaxLength(3);
            builder.Property(x => x.IsoNumericCode).HasColumnName(@"IsoNumericCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CountryType).HasColumnName(@"CountryType").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.LatestRecordedPopulation).HasColumnName(@"LatestRecordedPopulation").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.Continent).HasColumnName(@"Continent").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.Region).HasColumnName(@"Region").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.Subregion).HasColumnName(@"Subregion").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_Countries).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_Countries_Application_People");

            builder.HasIndex(x => x.CountryName).HasDatabaseName("UQ_Application_Countries_CountryName").IsUnique();
            builder.HasIndex(x => x.FormalName).HasDatabaseName("UQ_Application_Countries_FormalName").IsUnique();
        }
    }

    // DeliveryMethods
    public class Application_DeliveryMethodConfiguration : IEntityTypeConfiguration<Application_DeliveryMethod>
    {
        public void Configure(EntityTypeBuilder<Application_DeliveryMethod> builder)
        {
            builder.ToTable("DeliveryMethods", "Application");
            builder.HasKey(x => x.DeliveryMethodId).HasName("PK_Application_DeliveryMethods").IsClustered();

            builder.Property(x => x.DeliveryMethodId).HasColumnName(@"DeliveryMethodID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[DeliveryMethodID]");
            builder.Property(x => x.DeliveryMethodName).HasColumnName(@"DeliveryMethodName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_DeliveryMethods).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_DeliveryMethods_Application_People");

            builder.HasIndex(x => x.DeliveryMethodName).HasDatabaseName("UQ_Application_DeliveryMethods_DeliveryMethodName").IsUnique();
        }
    }

    // PaymentMethods
    public class Application_PaymentMethodConfiguration : IEntityTypeConfiguration<Application_PaymentMethod>
    {
        public void Configure(EntityTypeBuilder<Application_PaymentMethod> builder)
        {
            builder.ToTable("PaymentMethods", "Application");
            builder.HasKey(x => x.PaymentMethodId).HasName("PK_Application_PaymentMethods").IsClustered();

            builder.Property(x => x.PaymentMethodId).HasColumnName(@"PaymentMethodID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[PaymentMethodID]");
            builder.Property(x => x.PaymentMethodName).HasColumnName(@"PaymentMethodName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_PaymentMethods).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_PaymentMethods_Application_People");

            builder.HasIndex(x => x.PaymentMethodName).HasDatabaseName("UQ_Application_PaymentMethods_PaymentMethodName").IsUnique();
        }
    }

    // People
    public class Application_PersonConfiguration : IEntityTypeConfiguration<Application_Person>
    {
        public void Configure(EntityTypeBuilder<Application_Person> builder)
        {
            builder.ToTable("People", "Application");
            builder.HasKey(x => x.PersonId).HasName("PK_Application_People").IsClustered();

            builder.Property(x => x.PersonId).HasColumnName(@"PersonID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[PersonID]");
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.PreferredName).HasColumnName(@"PreferredName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.SearchName).HasColumnName(@"SearchName").HasColumnType("nvarchar(101)").IsRequired().HasMaxLength(101).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.IsPermittedToLogon).HasColumnName(@"IsPermittedToLogon").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LogonName).HasColumnName(@"LogonName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IsExternalLogonProvider).HasColumnName(@"IsExternalLogonProvider").HasColumnType("bit").IsRequired();
            builder.Property(x => x.HashedPassword).HasColumnName(@"HashedPassword").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.IsSystemUser).HasColumnName(@"IsSystemUser").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsEmployee).HasColumnName(@"IsEmployee").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsSalesperson).HasColumnName(@"IsSalesperson").HasColumnType("bit").IsRequired();
            builder.Property(x => x.UserPreferences).HasColumnName(@"UserPreferences").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.FaxNumber).HasColumnName(@"FaxNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Photo).HasColumnName(@"Photo").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.CustomFields).HasColumnName(@"CustomFields").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.OtherLanguages).HasColumnName(@"OtherLanguages").HasColumnType("nvarchar(max)").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person_LastEditedBy).WithMany(b => b.Application_People).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_People_Application_People");

            builder.HasIndex(x => x.FullName).HasDatabaseName("IX_Application_People_FullName");
            builder.HasIndex(x => x.IsEmployee).HasDatabaseName("IX_Application_People_IsEmployee");
            builder.HasIndex(x => x.IsSalesperson).HasDatabaseName("IX_Application_People_IsSalesperson");
            builder.HasIndex(x => new { x.IsPermittedToLogon, x.PersonId }).HasDatabaseName("IX_Application_People_Perf_20160301_05");
        }
    }

    // StateProvinces
    public class Application_StateProvinceConfiguration : IEntityTypeConfiguration<Application_StateProvince>
    {
        public void Configure(EntityTypeBuilder<Application_StateProvince> builder)
        {
            builder.ToTable("StateProvinces", "Application");
            builder.HasKey(x => x.StateProvinceId).HasName("PK_Application_StateProvinces").IsClustered();

            builder.Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[StateProvinceID]");
            builder.Property(x => x.StateProvinceCode).HasColumnName(@"StateProvinceCode").HasColumnType("nvarchar(5)").IsRequired().HasMaxLength(5);
            builder.Property(x => x.StateProvinceName).HasColumnName(@"StateProvinceName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.CountryId).HasColumnName(@"CountryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SalesTerritory).HasColumnName(@"SalesTerritory").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LatestRecordedPopulation).HasColumnName(@"LatestRecordedPopulation").HasColumnType("bigint").IsRequired(false);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Country).WithMany(b => b.Application_StateProvinces).HasForeignKey(c => c.CountryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_StateProvinces_CountryID_Application_Countries");
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_StateProvinces).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_StateProvinces_Application_People");

            builder.HasIndex(x => x.CountryId).HasDatabaseName("FK_Application_StateProvinces_CountryID");
            builder.HasIndex(x => x.SalesTerritory).HasDatabaseName("IX_Application_StateProvinces_SalesTerritory");
            builder.HasIndex(x => x.StateProvinceName).HasDatabaseName("UQ_Application_StateProvinces_StateProvinceName").IsUnique();
        }
    }

    // SystemParameters
    public class Application_SystemParameterConfiguration : IEntityTypeConfiguration<Application_SystemParameter>
    {
        public void Configure(EntityTypeBuilder<Application_SystemParameter> builder)
        {
            builder.ToTable("SystemParameters", "Application");
            builder.HasKey(x => x.SystemParameterId).HasName("PK_Application_SystemParameters").IsClustered();

            builder.Property(x => x.SystemParameterId).HasColumnName(@"SystemParameterID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[SystemParameterID]");
            builder.Property(x => x.DeliveryAddressLine1).HasColumnName(@"DeliveryAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.DeliveryAddressLine2).HasColumnName(@"DeliveryAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.DeliveryCityId).HasColumnName(@"DeliveryCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryPostalCode).HasColumnName(@"DeliveryPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.PostalAddressLine1).HasColumnName(@"PostalAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.PostalAddressLine2).HasColumnName(@"PostalAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.PostalCityId).HasColumnName(@"PostalCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PostalPostalCode).HasColumnName(@"PostalPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.ApplicationSettings).HasColumnName(@"ApplicationSettings").HasColumnType("nvarchar(max)").IsRequired();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_SystemParameters).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_SystemParameters_Application_People");
            builder.HasOne(a => a.DeliveryCity).WithMany(b => b.Application_SystemParameters_DeliveryCityId).HasForeignKey(c => c.DeliveryCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_SystemParameters_DeliveryCityID_Application_Cities");
            builder.HasOne(a => a.PostalCity).WithMany(b => b.Application_SystemParameters_PostalCityId).HasForeignKey(c => c.PostalCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_SystemParameters_PostalCityID_Application_Cities");

            builder.HasIndex(x => x.DeliveryCityId).HasDatabaseName("FK_Application_SystemParameters_DeliveryCityID");
            builder.HasIndex(x => x.PostalCityId).HasDatabaseName("FK_Application_SystemParameters_PostalCityID");
        }
    }

    // TransactionTypes
    public class Application_TransactionTypeConfiguration : IEntityTypeConfiguration<Application_TransactionType>
    {
        public void Configure(EntityTypeBuilder<Application_TransactionType> builder)
        {
            builder.ToTable("TransactionTypes", "Application");
            builder.HasKey(x => x.TransactionTypeId).HasName("PK_Application_TransactionTypes").IsClustered();

            builder.Property(x => x.TransactionTypeId).HasColumnName(@"TransactionTypeID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[TransactionTypeID]");
            builder.Property(x => x.TransactionTypeName).HasColumnName(@"TransactionTypeName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Application_TransactionTypes).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Application_TransactionTypes_Application_People");

            builder.HasIndex(x => x.TransactionTypeName).HasDatabaseName("UQ_Application_TransactionTypes_TransactionTypeName").IsUnique();
        }
    }

    // PurchaseOrders
    public class Purchasing_PurchaseOrderConfiguration : IEntityTypeConfiguration<Purchasing_PurchaseOrder>
    {
        public void Configure(EntityTypeBuilder<Purchasing_PurchaseOrder> builder)
        {
            builder.ToTable("PurchaseOrders", "Purchasing");
            builder.HasKey(x => x.PurchaseOrderId).HasName("PK_Purchasing_PurchaseOrders").IsClustered();

            builder.Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[PurchaseOrderID]");
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.DeliveryMethodId).HasColumnName(@"DeliveryMethodID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContactPersonId).HasColumnName(@"ContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ExpectedDeliveryDate).HasColumnName(@"ExpectedDeliveryDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.SupplierReference).HasColumnName(@"SupplierReference").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.IsOrderFinalized).HasColumnName(@"IsOrderFinalized").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.InternalComments).HasColumnName(@"InternalComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_DeliveryMethod).WithMany(b => b.Purchasing_PurchaseOrders).HasForeignKey(c => c.DeliveryMethodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrders_DeliveryMethodID_Application_DeliveryMethods");
            builder.HasOne(a => a.Application_Person_LastEditedBy).WithMany(b => b.Purchasing_PurchaseOrders_LastEditedBy).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrders_Application_People");
            builder.HasOne(a => a.ContactPerson).WithMany(b => b.Purchasing_PurchaseOrders_ContactPersonId).HasForeignKey(c => c.ContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrders_ContactPersonID_Application_People");
            builder.HasOne(a => a.Purchasing_Supplier).WithMany(b => b.Purchasing_PurchaseOrders).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrders_SupplierID_Purchasing_Suppliers");

            builder.HasIndex(x => x.ContactPersonId).HasDatabaseName("FK_Purchasing_PurchaseOrders_ContactPersonID");
            builder.HasIndex(x => x.DeliveryMethodId).HasDatabaseName("FK_Purchasing_PurchaseOrders_DeliveryMethodID");
            builder.HasIndex(x => x.SupplierId).HasDatabaseName("FK_Purchasing_PurchaseOrders_SupplierID");
        }
    }

    // PurchaseOrderLines
    public class Purchasing_PurchaseOrderLineConfiguration : IEntityTypeConfiguration<Purchasing_PurchaseOrderLine>
    {
        public void Configure(EntityTypeBuilder<Purchasing_PurchaseOrderLine> builder)
        {
            builder.ToTable("PurchaseOrderLines", "Purchasing");
            builder.HasKey(x => x.PurchaseOrderLineId).HasName("PK_Purchasing_PurchaseOrderLines").IsClustered();

            builder.Property(x => x.PurchaseOrderLineId).HasColumnName(@"PurchaseOrderLineID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[PurchaseOrderLineID]");
            builder.Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderedOuters).HasColumnName(@"OrderedOuters").HasColumnType("int").IsRequired();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.ReceivedOuters).HasColumnName(@"ReceivedOuters").HasColumnType("int").IsRequired();
            builder.Property(x => x.PackageTypeId).HasColumnName(@"PackageTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ExpectedUnitPricePerOuter).HasColumnName(@"ExpectedUnitPricePerOuter").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LastReceiptDate).HasColumnName(@"LastReceiptDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.IsOrderLineFinalized).HasColumnName(@"IsOrderLineFinalized").HasColumnType("bit").IsRequired();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Purchasing_PurchaseOrderLines).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrderLines_Application_People");
            builder.HasOne(a => a.Purchasing_PurchaseOrder).WithMany(b => b.Purchasing_PurchaseOrderLines).HasForeignKey(c => c.PurchaseOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrderLines_PurchaseOrderID_Purchasing_PurchaseOrders");
            builder.HasOne(a => a.Warehouse_PackageType).WithMany(b => b.Purchasing_PurchaseOrderLines).HasForeignKey(c => c.PackageTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrderLines_PackageTypeID_Warehouse_PackageTypes");
            builder.HasOne(a => a.Warehouse_StockItem).WithMany(b => b.Purchasing_PurchaseOrderLines).HasForeignKey(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_PurchaseOrderLines_StockItemID_Warehouse_StockItems");

            builder.HasIndex(x => x.PackageTypeId).HasDatabaseName("FK_Purchasing_PurchaseOrderLines_PackageTypeID");
            builder.HasIndex(x => x.PurchaseOrderId).HasDatabaseName("FK_Purchasing_PurchaseOrderLines_PurchaseOrderID");
            builder.HasIndex(x => x.StockItemId).HasDatabaseName("FK_Purchasing_PurchaseOrderLines_StockItemID");
            builder.HasIndex(x => new { x.IsOrderLineFinalized, x.StockItemId }).HasDatabaseName("IX_Purchasing_PurchaseOrderLines_Perf_20160301_4");
        }
    }

    // Suppliers
    public class Purchasing_SupplierConfiguration : IEntityTypeConfiguration<Purchasing_Supplier>
    {
        public void Configure(EntityTypeBuilder<Purchasing_Supplier> builder)
        {
            builder.ToTable("Suppliers", "Purchasing");
            builder.HasKey(x => x.SupplierId).HasName("PK_Purchasing_Suppliers").IsClustered();

            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[SupplierID]");
            builder.Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.SupplierCategoryId).HasColumnName(@"SupplierCategoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PrimaryContactPersonId).HasColumnName(@"PrimaryContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AlternateContactPersonId).HasColumnName(@"AlternateContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryMethodId).HasColumnName(@"DeliveryMethodID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveryCityId).HasColumnName(@"DeliveryCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PostalCityId).HasColumnName(@"PostalCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SupplierReference).HasColumnName(@"SupplierReference").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BankAccountName).HasColumnName(@"BankAccountName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BankAccountBranch).HasColumnName(@"BankAccountBranch").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BankAccountCode).HasColumnName(@"BankAccountCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BankAccountNumber).HasColumnName(@"BankAccountNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.BankInternationalCode).HasColumnName(@"BankInternationalCode").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.PaymentDays).HasColumnName(@"PaymentDays").HasColumnType("int").IsRequired();
            builder.Property(x => x.InternalComments).HasColumnName(@"InternalComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.FaxNumber).HasColumnName(@"FaxNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.WebsiteUrl).HasColumnName(@"WebsiteURL").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.DeliveryAddressLine1).HasColumnName(@"DeliveryAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.DeliveryAddressLine2).HasColumnName(@"DeliveryAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.DeliveryPostalCode).HasColumnName(@"DeliveryPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.PostalAddressLine1).HasColumnName(@"PostalAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.PostalAddressLine2).HasColumnName(@"PostalAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.PostalPostalCode).HasColumnName(@"PostalPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.AlternateContactPerson).WithMany(b => b.Purchasing_Suppliers_AlternateContactPersonId).HasForeignKey(c => c.AlternateContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_AlternateContactPersonID_Application_People");
            builder.HasOne(a => a.Application_DeliveryMethod).WithMany(b => b.Purchasing_Suppliers).HasForeignKey(c => c.DeliveryMethodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_DeliveryMethodID_Application_DeliveryMethods");
            builder.HasOne(a => a.Application_Person_LastEditedBy).WithMany(b => b.Purchasing_Suppliers_LastEditedBy).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_Application_People");
            builder.HasOne(a => a.DeliveryCity).WithMany(b => b.Purchasing_Suppliers_DeliveryCityId).HasForeignKey(c => c.DeliveryCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_DeliveryCityID_Application_Cities");
            builder.HasOne(a => a.PostalCity).WithMany(b => b.Purchasing_Suppliers_PostalCityId).HasForeignKey(c => c.PostalCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_PostalCityID_Application_Cities");
            builder.HasOne(a => a.PrimaryContactPerson).WithMany(b => b.Purchasing_Suppliers_PrimaryContactPersonId).HasForeignKey(c => c.PrimaryContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_PrimaryContactPersonID_Application_People");
            builder.HasOne(a => a.Purchasing_SupplierCategory).WithMany(b => b.Purchasing_Suppliers).HasForeignKey(c => c.SupplierCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_Suppliers_SupplierCategoryID_Purchasing_SupplierCategories");

            builder.HasIndex(x => x.AlternateContactPersonId).HasDatabaseName("FK_Purchasing_Suppliers_AlternateContactPersonID");
            builder.HasIndex(x => x.DeliveryCityId).HasDatabaseName("FK_Purchasing_Suppliers_DeliveryCityID");
            builder.HasIndex(x => x.DeliveryMethodId).HasDatabaseName("FK_Purchasing_Suppliers_DeliveryMethodID");
            builder.HasIndex(x => x.PostalCityId).HasDatabaseName("FK_Purchasing_Suppliers_PostalCityID");
            builder.HasIndex(x => x.PrimaryContactPersonId).HasDatabaseName("FK_Purchasing_Suppliers_PrimaryContactPersonID");
            builder.HasIndex(x => x.SupplierCategoryId).HasDatabaseName("FK_Purchasing_Suppliers_SupplierCategoryID");
            builder.HasIndex(x => x.SupplierName).HasDatabaseName("UQ_Purchasing_Suppliers_SupplierName").IsUnique();
        }
    }

    // SupplierCategories
    public class Purchasing_SupplierCategoryConfiguration : IEntityTypeConfiguration<Purchasing_SupplierCategory>
    {
        public void Configure(EntityTypeBuilder<Purchasing_SupplierCategory> builder)
        {
            builder.ToTable("SupplierCategories", "Purchasing");
            builder.HasKey(x => x.SupplierCategoryId).HasName("PK_Purchasing_SupplierCategories").IsClustered();

            builder.Property(x => x.SupplierCategoryId).HasColumnName(@"SupplierCategoryID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[SupplierCategoryID]");
            builder.Property(x => x.SupplierCategoryName).HasColumnName(@"SupplierCategoryName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Purchasing_SupplierCategories).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierCategories_Application_People");

            builder.HasIndex(x => x.SupplierCategoryName).HasDatabaseName("UQ_Purchasing_SupplierCategories_SupplierCategoryName").IsUnique();
        }
    }

    // SupplierTransactions
    public class Purchasing_SupplierTransactionConfiguration : IEntityTypeConfiguration<Purchasing_SupplierTransaction>
    {
        public void Configure(EntityTypeBuilder<Purchasing_SupplierTransaction> builder)
        {
            builder.ToTable("SupplierTransactions", "Purchasing");
            builder.HasKey(x => x.SupplierTransactionId).HasName("PK_Purchasing_SupplierTransactions");

            builder.Property(x => x.SupplierTransactionId).HasColumnName(@"SupplierTransactionID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[TransactionID]");
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TransactionTypeId).HasColumnName(@"TransactionTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaymentMethodId).HasColumnName(@"PaymentMethodID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierInvoiceNumber).HasColumnName(@"SupplierInvoiceNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.AmountExcludingTax).HasColumnName(@"AmountExcludingTax").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TaxAmount).HasColumnName(@"TaxAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TransactionAmount).HasColumnName(@"TransactionAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.OutstandingBalance).HasColumnName(@"OutstandingBalance").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.FinalizationDate).HasColumnName(@"FinalizationDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.IsFinalized).HasColumnName(@"IsFinalized").HasColumnType("bit").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_PaymentMethod).WithMany(b => b.Purchasing_SupplierTransactions).HasForeignKey(c => c.PaymentMethodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierTransactions_PaymentMethodID_Application_PaymentMethods");
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Purchasing_SupplierTransactions).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierTransactions_Application_People");
            builder.HasOne(a => a.Application_TransactionType).WithMany(b => b.Purchasing_SupplierTransactions).HasForeignKey(c => c.TransactionTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierTransactions_TransactionTypeID_Application_TransactionTypes");
            builder.HasOne(a => a.Purchasing_PurchaseOrder).WithMany(b => b.Purchasing_SupplierTransactions).HasForeignKey(c => c.PurchaseOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierTransactions_PurchaseOrderID_Purchasing_PurchaseOrders");
            builder.HasOne(a => a.Purchasing_Supplier).WithMany(b => b.Purchasing_SupplierTransactions).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Purchasing_SupplierTransactions_SupplierID_Purchasing_Suppliers");

            builder.HasIndex(x => x.TransactionDate).HasDatabaseName("CX_Purchasing_SupplierTransactions");
            builder.HasIndex(x => x.PaymentMethodId).HasDatabaseName("FK_Purchasing_SupplierTransactions_PaymentMethodID");
            builder.HasIndex(x => x.PurchaseOrderId).HasDatabaseName("FK_Purchasing_SupplierTransactions_PurchaseOrderID");
            builder.HasIndex(x => x.SupplierId).HasDatabaseName("FK_Purchasing_SupplierTransactions_SupplierID");
            builder.HasIndex(x => x.TransactionTypeId).HasDatabaseName("FK_Purchasing_SupplierTransactions_TransactionTypeID");
            builder.HasIndex(x => x.IsFinalized).HasDatabaseName("IX_Purchasing_SupplierTransactions_IsFinalized");
        }
    }

    // BuyingGroups
    public class Sales_BuyingGroupConfiguration : IEntityTypeConfiguration<Sales_BuyingGroup>
    {
        public void Configure(EntityTypeBuilder<Sales_BuyingGroup> builder)
        {
            builder.ToTable("BuyingGroups", "Sales");
            builder.HasKey(x => x.BuyingGroupId).HasName("PK_Sales_BuyingGroups").IsClustered();

            builder.Property(x => x.BuyingGroupId).HasColumnName(@"BuyingGroupID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[BuyingGroupID]");
            builder.Property(x => x.BuyingGroupName).HasColumnName(@"BuyingGroupName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Sales_BuyingGroups).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_BuyingGroups_Application_People");

            builder.HasIndex(x => x.BuyingGroupName).HasDatabaseName("UQ_Sales_BuyingGroups_BuyingGroupName").IsUnique();
        }
    }

    // Customers
    public class Sales_CustomerConfiguration : IEntityTypeConfiguration<Sales_Customer>
    {
        public void Configure(EntityTypeBuilder<Sales_Customer> builder)
        {
            builder.ToTable("Customers", "Sales");
            builder.HasKey(x => x.CustomerId).HasName("PK_Sales_Customers").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[CustomerID]");
            builder.Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.BillToCustomerId).HasColumnName(@"BillToCustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerCategoryId).HasColumnName(@"CustomerCategoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BuyingGroupId).HasColumnName(@"BuyingGroupID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PrimaryContactPersonId).HasColumnName(@"PrimaryContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AlternateContactPersonId).HasColumnName(@"AlternateContactPersonID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveryMethodId).HasColumnName(@"DeliveryMethodID").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryCityId).HasColumnName(@"DeliveryCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PostalCityId).HasColumnName(@"PostalCityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CreditLimit).HasColumnName(@"CreditLimit").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.AccountOpenedDate).HasColumnName(@"AccountOpenedDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.StandardDiscountPercentage).HasColumnName(@"StandardDiscountPercentage").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.IsStatementSent).HasColumnName(@"IsStatementSent").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsOnCreditHold).HasColumnName(@"IsOnCreditHold").HasColumnType("bit").IsRequired();
            builder.Property(x => x.PaymentDays).HasColumnName(@"PaymentDays").HasColumnType("int").IsRequired();
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.FaxNumber).HasColumnName(@"FaxNumber").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.DeliveryRun).HasColumnName(@"DeliveryRun").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.RunPosition).HasColumnName(@"RunPosition").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.WebsiteUrl).HasColumnName(@"WebsiteURL").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.DeliveryAddressLine1).HasColumnName(@"DeliveryAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.DeliveryAddressLine2).HasColumnName(@"DeliveryAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.DeliveryPostalCode).HasColumnName(@"DeliveryPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.PostalAddressLine1).HasColumnName(@"PostalAddressLine1").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.PostalAddressLine2).HasColumnName(@"PostalAddressLine2").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);
            builder.Property(x => x.PostalPostalCode).HasColumnName(@"PostalPostalCode").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.AlternateContactPerson).WithMany(b => b.Sales_Customers_AlternateContactPersonId).HasForeignKey(c => c.AlternateContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_AlternateContactPersonID_Application_People");
            builder.HasOne(a => a.Application_DeliveryMethod).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.DeliveryMethodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_DeliveryMethodID_Application_DeliveryMethods");
            builder.HasOne(a => a.Application_Person_LastEditedBy).WithMany(b => b.Sales_Customers_LastEditedBy).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_Application_People");
            builder.HasOne(a => a.BillToCustomer).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.BillToCustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_BillToCustomerID_Sales_Customers");
            builder.HasOne(a => a.DeliveryCity).WithMany(b => b.Sales_Customers_DeliveryCityId).HasForeignKey(c => c.DeliveryCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_DeliveryCityID_Application_Cities");
            builder.HasOne(a => a.PostalCity).WithMany(b => b.Sales_Customers_PostalCityId).HasForeignKey(c => c.PostalCityId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_PostalCityID_Application_Cities");
            builder.HasOne(a => a.PrimaryContactPerson).WithMany(b => b.Sales_Customers_PrimaryContactPersonId).HasForeignKey(c => c.PrimaryContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_PrimaryContactPersonID_Application_People");
            builder.HasOne(a => a.Sales_BuyingGroup).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.BuyingGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_BuyingGroupID_Sales_BuyingGroups");
            builder.HasOne(a => a.Sales_CustomerCategory).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.CustomerCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Customers_CustomerCategoryID_Sales_CustomerCategories");

            builder.HasIndex(x => x.AlternateContactPersonId).HasDatabaseName("FK_Sales_Customers_AlternateContactPersonID");
            builder.HasIndex(x => x.BuyingGroupId).HasDatabaseName("FK_Sales_Customers_BuyingGroupID");
            builder.HasIndex(x => x.CustomerCategoryId).HasDatabaseName("FK_Sales_Customers_CustomerCategoryID");
            builder.HasIndex(x => x.DeliveryCityId).HasDatabaseName("FK_Sales_Customers_DeliveryCityID");
            builder.HasIndex(x => x.DeliveryMethodId).HasDatabaseName("FK_Sales_Customers_DeliveryMethodID");
            builder.HasIndex(x => x.PostalCityId).HasDatabaseName("FK_Sales_Customers_PostalCityID");
            builder.HasIndex(x => x.PrimaryContactPersonId).HasDatabaseName("FK_Sales_Customers_PrimaryContactPersonID");
            builder.HasIndex(x => new { x.IsOnCreditHold, x.CustomerId, x.BillToCustomerId }).HasDatabaseName("IX_Sales_Customers_Perf_20160301_06");
            builder.HasIndex(x => x.CustomerName).HasDatabaseName("UQ_Sales_Customers_CustomerName").IsUnique();
        }
    }

    // CustomerCategories
    public class Sales_CustomerCategoryConfiguration : IEntityTypeConfiguration<Sales_CustomerCategory>
    {
        public void Configure(EntityTypeBuilder<Sales_CustomerCategory> builder)
        {
            builder.ToTable("CustomerCategories", "Sales");
            builder.HasKey(x => x.CustomerCategoryId).HasName("PK_Sales_CustomerCategories").IsClustered();

            builder.Property(x => x.CustomerCategoryId).HasColumnName(@"CustomerCategoryID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[CustomerCategoryID]");
            builder.Property(x => x.CustomerCategoryName).HasColumnName(@"CustomerCategoryName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Sales_CustomerCategories).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_CustomerCategories_Application_People");

            builder.HasIndex(x => x.CustomerCategoryName).HasDatabaseName("UQ_Sales_CustomerCategories_CustomerCategoryName").IsUnique();
        }
    }

    // CustomerTransactions
    public class Sales_CustomerTransactionConfiguration : IEntityTypeConfiguration<Sales_CustomerTransaction>
    {
        public void Configure(EntityTypeBuilder<Sales_CustomerTransaction> builder)
        {
            builder.ToTable("CustomerTransactions", "Sales");
            builder.HasKey(x => x.CustomerTransactionId).HasName("PK_Sales_CustomerTransactions");

            builder.Property(x => x.CustomerTransactionId).HasColumnName(@"CustomerTransactionID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[TransactionID]");
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TransactionTypeId).HasColumnName(@"TransactionTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PaymentMethodId).HasColumnName(@"PaymentMethodID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.AmountExcludingTax).HasColumnName(@"AmountExcludingTax").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TaxAmount).HasColumnName(@"TaxAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.TransactionAmount).HasColumnName(@"TransactionAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.OutstandingBalance).HasColumnName(@"OutstandingBalance").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.FinalizationDate).HasColumnName(@"FinalizationDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.IsFinalized).HasColumnName(@"IsFinalized").HasColumnType("bit").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_PaymentMethod).WithMany(b => b.Sales_CustomerTransactions).HasForeignKey(c => c.PaymentMethodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_CustomerTransactions_PaymentMethodID_Application_PaymentMethods");
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Sales_CustomerTransactions).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_CustomerTransactions_Application_People");
            builder.HasOne(a => a.Application_TransactionType).WithMany(b => b.Sales_CustomerTransactions).HasForeignKey(c => c.TransactionTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_CustomerTransactions_TransactionTypeID_Application_TransactionTypes");
            builder.HasOne(a => a.Sales_Customer).WithMany(b => b.Sales_CustomerTransactions).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_CustomerTransactions_CustomerID_Sales_Customers");
            builder.HasOne(a => a.Sales_Invoice).WithMany(b => b.Sales_CustomerTransactions).HasForeignKey(c => c.InvoiceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_CustomerTransactions_InvoiceID_Sales_Invoices");

            builder.HasIndex(x => x.TransactionDate).HasDatabaseName("CX_Sales_CustomerTransactions");
            builder.HasIndex(x => x.CustomerId).HasDatabaseName("FK_Sales_CustomerTransactions_CustomerID");
            builder.HasIndex(x => x.InvoiceId).HasDatabaseName("FK_Sales_CustomerTransactions_InvoiceID");
            builder.HasIndex(x => x.PaymentMethodId).HasDatabaseName("FK_Sales_CustomerTransactions_PaymentMethodID");
            builder.HasIndex(x => x.TransactionTypeId).HasDatabaseName("FK_Sales_CustomerTransactions_TransactionTypeID");
            builder.HasIndex(x => x.IsFinalized).HasDatabaseName("IX_Sales_CustomerTransactions_IsFinalized");
        }
    }

    // Invoices
    public class Sales_InvoiceConfiguration : IEntityTypeConfiguration<Sales_Invoice>
    {
        public void Configure(EntityTypeBuilder<Sales_Invoice> builder)
        {
            builder.ToTable("Invoices", "Sales");
            builder.HasKey(x => x.InvoiceId).HasName("PK_Sales_Invoices").IsClustered();

            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[InvoiceID]");
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BillToCustomerId).HasColumnName(@"BillToCustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DeliveryMethodId).HasColumnName(@"DeliveryMethodID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ContactPersonId).HasColumnName(@"ContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.AccountsPersonId).HasColumnName(@"AccountsPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SalespersonPersonId).HasColumnName(@"SalespersonPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PackedByPersonId).HasColumnName(@"PackedByPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.CustomerPurchaseOrderNumber).HasColumnName(@"CustomerPurchaseOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.IsCreditNote).HasColumnName(@"IsCreditNote").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CreditNoteReason).HasColumnName(@"CreditNoteReason").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DeliveryInstructions).HasColumnName(@"DeliveryInstructions").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.InternalComments).HasColumnName(@"InternalComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.TotalDryItems).HasColumnName(@"TotalDryItems").HasColumnType("int").IsRequired();
            builder.Property(x => x.TotalChillerItems).HasColumnName(@"TotalChillerItems").HasColumnType("int").IsRequired();
            builder.Property(x => x.DeliveryRun).HasColumnName(@"DeliveryRun").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.RunPosition).HasColumnName(@"RunPosition").HasColumnType("nvarchar(5)").IsRequired(false).HasMaxLength(5);
            builder.Property(x => x.ReturnedDeliveryData).HasColumnName(@"ReturnedDeliveryData").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ConfirmedDeliveryTime).HasColumnName(@"ConfirmedDeliveryTime").HasColumnType("datetime2").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.ConfirmedReceivedBy).HasColumnName(@"ConfirmedReceivedBy").HasColumnType("nvarchar(4000)").IsRequired(false).HasMaxLength(4000).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.AccountsPerson).WithMany(b => b.Sales_Invoices_AccountsPersonId).HasForeignKey(c => c.AccountsPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_AccountsPersonID_Application_People");
            builder.HasOne(a => a.Application_DeliveryMethod).WithMany(b => b.Sales_Invoices).HasForeignKey(c => c.DeliveryMethodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_DeliveryMethodID_Application_DeliveryMethods");
            builder.HasOne(a => a.Application_Person_LastEditedBy).WithMany(b => b.Sales_Invoices_LastEditedBy).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_Application_People");
            builder.HasOne(a => a.BillToCustomer).WithMany(b => b.Sales_Invoices_BillToCustomerId).HasForeignKey(c => c.BillToCustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_BillToCustomerID_Sales_Customers");
            builder.HasOne(a => a.ContactPerson).WithMany(b => b.Sales_Invoices_ContactPersonId).HasForeignKey(c => c.ContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_ContactPersonID_Application_People");
            builder.HasOne(a => a.Customer).WithMany(b => b.Sales_Invoices_CustomerId).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_CustomerID_Sales_Customers");
            builder.HasOne(a => a.PackedByPerson).WithMany(b => b.Sales_Invoices_PackedByPersonId).HasForeignKey(c => c.PackedByPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_PackedByPersonID_Application_People");
            builder.HasOne(a => a.Sales_Order).WithMany(b => b.Sales_Invoices).HasForeignKey(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_OrderID_Sales_Orders");
            builder.HasOne(a => a.SalespersonPerson).WithMany(b => b.Sales_Invoices_SalespersonPersonId).HasForeignKey(c => c.SalespersonPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Invoices_SalespersonPersonID_Application_People");

            builder.HasIndex(x => x.AccountsPersonId).HasDatabaseName("FK_Sales_Invoices_AccountsPersonID");
            builder.HasIndex(x => x.BillToCustomerId).HasDatabaseName("FK_Sales_Invoices_BillToCustomerID");
            builder.HasIndex(x => x.ContactPersonId).HasDatabaseName("FK_Sales_Invoices_ContactPersonID");
            builder.HasIndex(x => x.CustomerId).HasDatabaseName("FK_Sales_Invoices_CustomerID");
            builder.HasIndex(x => x.DeliveryMethodId).HasDatabaseName("FK_Sales_Invoices_DeliveryMethodID");
            builder.HasIndex(x => x.OrderId).HasDatabaseName("FK_Sales_Invoices_OrderID");
            builder.HasIndex(x => x.PackedByPersonId).HasDatabaseName("FK_Sales_Invoices_PackedByPersonID");
            builder.HasIndex(x => x.SalespersonPersonId).HasDatabaseName("FK_Sales_Invoices_SalespersonPersonID");
            builder.HasIndex(x => x.ConfirmedDeliveryTime).HasDatabaseName("IX_Sales_Invoices_ConfirmedDeliveryTime");
        }
    }

    // InvoiceLines
    public class Sales_InvoiceLineConfiguration : IEntityTypeConfiguration<Sales_InvoiceLine>
    {
        public void Configure(EntityTypeBuilder<Sales_InvoiceLine> builder)
        {
            builder.ToTable("InvoiceLines", "Sales");
            builder.HasKey(x => x.InvoiceLineId).HasName("PK_Sales_InvoiceLines").IsClustered();

            builder.Property(x => x.InvoiceLineId).HasColumnName(@"InvoiceLineID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[InvoiceLineID]");
            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PackageTypeId).HasColumnName(@"PackageTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.TaxRate).HasColumnName(@"TaxRate").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.TaxAmount).HasColumnName(@"TaxAmount").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.LineProfit).HasColumnName(@"LineProfit").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.ExtendedPrice).HasColumnName(@"ExtendedPrice").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Sales_InvoiceLines).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_InvoiceLines_Application_People");
            builder.HasOne(a => a.Sales_Invoice).WithMany(b => b.Sales_InvoiceLines).HasForeignKey(c => c.InvoiceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_InvoiceLines_InvoiceID_Sales_Invoices");
            builder.HasOne(a => a.Warehouse_PackageType).WithMany(b => b.Sales_InvoiceLines).HasForeignKey(c => c.PackageTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_InvoiceLines_PackageTypeID_Warehouse_PackageTypes");
            builder.HasOne(a => a.Warehouse_StockItem).WithMany(b => b.Sales_InvoiceLines).HasForeignKey(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_InvoiceLines_StockItemID_Warehouse_StockItems");

            builder.HasIndex(x => x.InvoiceId).HasDatabaseName("FK_Sales_InvoiceLines_InvoiceID");
            builder.HasIndex(x => x.PackageTypeId).HasDatabaseName("FK_Sales_InvoiceLines_PackageTypeID");
            builder.HasIndex(x => x.StockItemId).HasDatabaseName("FK_Sales_InvoiceLines_StockItemID");
        }
    }

    // Orders
    public class Sales_OrderConfiguration : IEntityTypeConfiguration<Sales_Order>
    {
        public void Configure(EntityTypeBuilder<Sales_Order> builder)
        {
            builder.ToTable("Orders", "Sales");
            builder.HasKey(x => x.OrderId).HasName("PK_Sales_Orders").IsClustered();

            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[OrderID]");
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            builder.Property(x => x.SalespersonPersonId).HasColumnName(@"SalespersonPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.PickedByPersonId).HasColumnName(@"PickedByPersonID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContactPersonId).HasColumnName(@"ContactPersonID").HasColumnType("int").IsRequired();
            builder.Property(x => x.BackorderOrderId).HasColumnName(@"BackorderOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.ExpectedDeliveryDate).HasColumnName(@"ExpectedDeliveryDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.CustomerPurchaseOrderNumber).HasColumnName(@"CustomerPurchaseOrderNumber").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.IsUndersupplyBackordered).HasColumnName(@"IsUndersupplyBackordered").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DeliveryInstructions).HasColumnName(@"DeliveryInstructions").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.InternalComments).HasColumnName(@"InternalComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.PickingCompletedWhen).HasColumnName(@"PickingCompletedWhen").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person_LastEditedBy).WithMany(b => b.Sales_Orders_LastEditedBy).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Orders_Application_People");
            builder.HasOne(a => a.BackorderOrder).WithMany(b => b.Sales_Orders).HasForeignKey(c => c.BackorderOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Orders_BackorderOrderID_Sales_Orders");
            builder.HasOne(a => a.ContactPerson).WithMany(b => b.Sales_Orders_ContactPersonId).HasForeignKey(c => c.ContactPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Orders_ContactPersonID_Application_People");
            builder.HasOne(a => a.PickedByPerson).WithMany(b => b.Sales_Orders_PickedByPersonId).HasForeignKey(c => c.PickedByPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Orders_PickedByPersonID_Application_People");
            builder.HasOne(a => a.Sales_Customer).WithMany(b => b.Sales_Orders).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Orders_CustomerID_Sales_Customers");
            builder.HasOne(a => a.SalespersonPerson).WithMany(b => b.Sales_Orders_SalespersonPersonId).HasForeignKey(c => c.SalespersonPersonId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_Orders_SalespersonPersonID_Application_People");

            builder.HasIndex(x => x.ContactPersonId).HasDatabaseName("FK_Sales_Orders_ContactPersonID");
            builder.HasIndex(x => x.CustomerId).HasDatabaseName("FK_Sales_Orders_CustomerID");
            builder.HasIndex(x => x.PickedByPersonId).HasDatabaseName("FK_Sales_Orders_PickedByPersonID");
            builder.HasIndex(x => x.SalespersonPersonId).HasDatabaseName("FK_Sales_Orders_SalespersonPersonID");
        }
    }

    // OrderLines
    public class Sales_OrderLineConfiguration : IEntityTypeConfiguration<Sales_OrderLine>
    {
        public void Configure(EntityTypeBuilder<Sales_OrderLine> builder)
        {
            builder.ToTable("OrderLines", "Sales");
            builder.HasKey(x => x.OrderLineId).HasName("PK_Sales_OrderLines").IsClustered();

            builder.Property(x => x.OrderLineId).HasColumnName(@"OrderLineID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[OrderLineID]");
            builder.Property(x => x.OrderId).HasColumnName(@"OrderID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.PackageTypeId).HasColumnName(@"PackageTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.TaxRate).HasColumnName(@"TaxRate").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.PickedQuantity).HasColumnName(@"PickedQuantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.PickingCompletedWhen).HasColumnName(@"PickingCompletedWhen").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Sales_OrderLines).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_OrderLines_Application_People");
            builder.HasOne(a => a.Sales_Order).WithMany(b => b.Sales_OrderLines).HasForeignKey(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_OrderLines_OrderID_Sales_Orders");
            builder.HasOne(a => a.Warehouse_PackageType).WithMany(b => b.Sales_OrderLines).HasForeignKey(c => c.PackageTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_OrderLines_PackageTypeID_Warehouse_PackageTypes");
            builder.HasOne(a => a.Warehouse_StockItem).WithMany(b => b.Sales_OrderLines).HasForeignKey(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_OrderLines_StockItemID_Warehouse_StockItems");

            builder.HasIndex(x => x.OrderId).HasDatabaseName("FK_Sales_OrderLines_OrderID");
            builder.HasIndex(x => x.PackageTypeId).HasDatabaseName("FK_Sales_OrderLines_PackageTypeID");
            builder.HasIndex(x => x.StockItemId).HasDatabaseName("IX_Sales_OrderLines_AllocatedStockItems");
            builder.HasIndex(x => new { x.PickingCompletedWhen, x.OrderId, x.OrderLineId }).HasDatabaseName("IX_Sales_OrderLines_Perf_20160301_01");
            builder.HasIndex(x => new { x.StockItemId, x.PickingCompletedWhen }).HasDatabaseName("IX_Sales_OrderLines_Perf_20160301_02");
        }
    }

    // SpecialDeals
    public class Sales_SpecialDealConfiguration : IEntityTypeConfiguration<Sales_SpecialDeal>
    {
        public void Configure(EntityTypeBuilder<Sales_SpecialDeal> builder)
        {
            builder.ToTable("SpecialDeals", "Sales");
            builder.HasKey(x => x.SpecialDealId).HasName("PK_Sales_SpecialDeals").IsClustered();

            builder.Property(x => x.SpecialDealId).HasColumnName(@"SpecialDealID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[SpecialDealID]");
            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BuyingGroupId).HasColumnName(@"BuyingGroupID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustomerCategoryId).HasColumnName(@"CustomerCategoryID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StockGroupId).HasColumnName(@"StockGroupID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DealDescription).HasColumnName(@"DealDescription").HasColumnType("nvarchar(30)").IsRequired().HasMaxLength(30);
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.DiscountAmount).HasColumnName(@"DiscountAmount").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.DiscountPercentage).HasColumnName(@"DiscountPercentage").HasColumnType("decimal(18,3)").IsRequired(false);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Sales_SpecialDeals).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_SpecialDeals_Application_People");
            builder.HasOne(a => a.Sales_BuyingGroup).WithMany(b => b.Sales_SpecialDeals).HasForeignKey(c => c.BuyingGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_SpecialDeals_BuyingGroupID_Sales_BuyingGroups");
            builder.HasOne(a => a.Sales_Customer).WithMany(b => b.Sales_SpecialDeals).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_SpecialDeals_CustomerID_Sales_Customers");
            builder.HasOne(a => a.Sales_CustomerCategory).WithMany(b => b.Sales_SpecialDeals).HasForeignKey(c => c.CustomerCategoryId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_SpecialDeals_CustomerCategoryID_Sales_CustomerCategories");
            builder.HasOne(a => a.Warehouse_StockGroup).WithMany(b => b.Sales_SpecialDeals).HasForeignKey(c => c.StockGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_SpecialDeals_StockGroupID_Warehouse_StockGroups");
            builder.HasOne(a => a.Warehouse_StockItem).WithMany(b => b.Sales_SpecialDeals).HasForeignKey(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Sales_SpecialDeals_StockItemID_Warehouse_StockItems");

            builder.HasIndex(x => x.BuyingGroupId).HasDatabaseName("FK_Sales_SpecialDeals_BuyingGroupID");
            builder.HasIndex(x => x.CustomerCategoryId).HasDatabaseName("FK_Sales_SpecialDeals_CustomerCategoryID");
            builder.HasIndex(x => x.CustomerId).HasDatabaseName("FK_Sales_SpecialDeals_CustomerID");
            builder.HasIndex(x => x.StockGroupId).HasDatabaseName("FK_Sales_SpecialDeals_StockGroupID");
            builder.HasIndex(x => x.StockItemId).HasDatabaseName("FK_Sales_SpecialDeals_StockItemID");
        }
    }

    // ColdRoomTemperatures
    public class Warehouse_ColdRoomTemperatureConfiguration : IEntityTypeConfiguration<Warehouse_ColdRoomTemperature>
    {
        public void Configure(EntityTypeBuilder<Warehouse_ColdRoomTemperature> builder)
        {
            builder.ToTable("ColdRoomTemperatures", "Warehouse");
            builder.HasKey(x => x.ColdRoomTemperatureId).HasName("PK_Warehouse_ColdRoomTemperatures");

            builder.Property(x => x.ColdRoomTemperatureId).HasColumnName(@"ColdRoomTemperatureID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ColdRoomSensorNumber).HasColumnName(@"ColdRoomSensorNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.RecordedWhen).HasColumnName(@"RecordedWhen").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("decimal(10,2)").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            builder.HasIndex(x => x.ColdRoomSensorNumber).HasDatabaseName("IX_Warehouse_ColdRoomTemperatures_ColdRoomSensorNumber");
        }
    }

    // Colors
    public class Warehouse_ColorConfiguration : IEntityTypeConfiguration<Warehouse_Color>
    {
        public void Configure(EntityTypeBuilder<Warehouse_Color> builder)
        {
            builder.ToTable("Colors", "Warehouse");
            builder.HasKey(x => x.ColorId).HasName("PK_Warehouse_Colors").IsClustered();

            builder.Property(x => x.ColorId).HasColumnName(@"ColorID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[ColorID]");
            builder.Property(x => x.ColorName).HasColumnName(@"ColorName").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_Colors).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_Colors_Application_People");

            builder.HasIndex(x => x.ColorName).HasDatabaseName("UQ_Warehouse_Colors_ColorName").IsUnique();
        }
    }

    // PackageTypes
    public class Warehouse_PackageTypeConfiguration : IEntityTypeConfiguration<Warehouse_PackageType>
    {
        public void Configure(EntityTypeBuilder<Warehouse_PackageType> builder)
        {
            builder.ToTable("PackageTypes", "Warehouse");
            builder.HasKey(x => x.PackageTypeId).HasName("PK_Warehouse_PackageTypes").IsClustered();

            builder.Property(x => x.PackageTypeId).HasColumnName(@"PackageTypeID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[PackageTypeID]");
            builder.Property(x => x.PackageTypeName).HasColumnName(@"PackageTypeName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_PackageTypes).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_PackageTypes_Application_People");

            builder.HasIndex(x => x.PackageTypeName).HasDatabaseName("UQ_Warehouse_PackageTypes_PackageTypeName").IsUnique();
        }
    }

    // StockGroups
    public class Warehouse_StockGroupConfiguration : IEntityTypeConfiguration<Warehouse_StockGroup>
    {
        public void Configure(EntityTypeBuilder<Warehouse_StockGroup> builder)
        {
            builder.ToTable("StockGroups", "Warehouse");
            builder.HasKey(x => x.StockGroupId).HasName("PK_Warehouse_StockGroups").IsClustered();

            builder.Property(x => x.StockGroupId).HasColumnName(@"StockGroupID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[StockGroupID]");
            builder.Property(x => x.StockGroupName).HasColumnName(@"StockGroupName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_StockGroups).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockGroups_Application_People");

            builder.HasIndex(x => x.StockGroupName).HasDatabaseName("UQ_Warehouse_StockGroups_StockGroupName").IsUnique();
        }
    }

    // StockItems
    public class Warehouse_StockItemConfiguration : IEntityTypeConfiguration<Warehouse_StockItem>
    {
        public void Configure(EntityTypeBuilder<Warehouse_StockItem> builder)
        {
            builder.ToTable("StockItems", "Warehouse");
            builder.HasKey(x => x.StockItemId).HasName("PK_Warehouse_StockItems").IsClustered();

            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[StockItemID]");
            builder.Property(x => x.StockItemName).HasColumnName(@"StockItemName").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            builder.Property(x => x.ColorId).HasColumnName(@"ColorID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UnitPackageId).HasColumnName(@"UnitPackageID").HasColumnType("int").IsRequired();
            builder.Property(x => x.OuterPackageId).HasColumnName(@"OuterPackageID").HasColumnType("int").IsRequired();
            builder.Property(x => x.Brand).HasColumnName(@"Brand").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Size).HasColumnName(@"Size").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.LeadTimeDays).HasColumnName(@"LeadTimeDays").HasColumnType("int").IsRequired();
            builder.Property(x => x.QuantityPerOuter).HasColumnName(@"QuantityPerOuter").HasColumnType("int").IsRequired();
            builder.Property(x => x.IsChillerStock).HasColumnName(@"IsChillerStock").HasColumnType("bit").IsRequired();
            builder.Property(x => x.Barcode).HasColumnName(@"Barcode").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.TaxRate).HasColumnName(@"TaxRate").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.RecommendedRetailPrice).HasColumnName(@"RecommendedRetailPrice").HasColumnType("decimal(18,2)").IsRequired(false);
            builder.Property(x => x.TypicalWeightPerUnit).HasColumnName(@"TypicalWeightPerUnit").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.MarketingComments).HasColumnName(@"MarketingComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.InternalComments).HasColumnName(@"InternalComments").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Photo).HasColumnName(@"Photo").HasColumnType("varbinary(max)").IsRequired(false);
            builder.Property(x => x.CustomFields).HasColumnName(@"CustomFields").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Tags).HasColumnName(@"Tags").HasColumnType("nvarchar(max)").IsRequired(false).ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.SearchDetails).HasColumnName(@"SearchDetails").HasColumnType("nvarchar(max)").IsRequired().ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().ValueGeneratedOnAdd();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_StockItems).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItems_Application_People");
            builder.HasOne(a => a.OuterPackage).WithMany(b => b.Warehouse_StockItems_OuterPackageId).HasForeignKey(c => c.OuterPackageId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItems_OuterPackageID_Warehouse_PackageTypes");
            builder.HasOne(a => a.Purchasing_Supplier).WithMany(b => b.Warehouse_StockItems).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItems_SupplierID_Purchasing_Suppliers");
            builder.HasOne(a => a.UnitPackage).WithMany(b => b.Warehouse_StockItems_UnitPackageId).HasForeignKey(c => c.UnitPackageId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItems_UnitPackageID_Warehouse_PackageTypes");
            builder.HasOne(a => a.Warehouse_Color).WithMany(b => b.Warehouse_StockItems).HasForeignKey(c => c.ColorId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItems_ColorID_Warehouse_Colors");

            builder.HasIndex(x => x.ColorId).HasDatabaseName("FK_Warehouse_StockItems_ColorID");
            builder.HasIndex(x => x.OuterPackageId).HasDatabaseName("FK_Warehouse_StockItems_OuterPackageID");
            builder.HasIndex(x => x.SupplierId).HasDatabaseName("FK_Warehouse_StockItems_SupplierID");
            builder.HasIndex(x => x.UnitPackageId).HasDatabaseName("FK_Warehouse_StockItems_UnitPackageID");
            builder.HasIndex(x => x.StockItemName).HasDatabaseName("UQ_Warehouse_StockItems_StockItemName").IsUnique();
        }
    }

    // StockItemHoldings
    public class Warehouse_StockItemHoldingConfiguration : IEntityTypeConfiguration<Warehouse_StockItemHolding>
    {
        public void Configure(EntityTypeBuilder<Warehouse_StockItemHolding> builder)
        {
            builder.ToTable("StockItemHoldings", "Warehouse");
            builder.HasKey(x => x.StockItemId).HasName("PK_Warehouse_StockItemHoldings").IsClustered();

            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.QuantityOnHand).HasColumnName(@"QuantityOnHand").HasColumnType("int").IsRequired();
            builder.Property(x => x.BinLocation).HasColumnName(@"BinLocation").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.LastStocktakeQuantity).HasColumnName(@"LastStocktakeQuantity").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastCostPrice).HasColumnName(@"LastCostPrice").HasColumnType("decimal(18,2)").IsRequired();
            builder.Property(x => x.ReorderLevel).HasColumnName(@"ReorderLevel").HasColumnType("int").IsRequired();
            builder.Property(x => x.TargetStockLevel).HasColumnName(@"TargetStockLevel").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_StockItemHoldings).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemHoldings_Application_People");
            builder.HasOne(a => a.Warehouse_StockItem).WithOne(b => b.Warehouse_StockItemHolding).HasForeignKey<Warehouse_StockItemHolding>(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("PKFK_Warehouse_StockItemHoldings_StockItemID_Warehouse_StockItems");
        }
    }

    // StockItemStockGroups
    public class Warehouse_StockItemStockGroupConfiguration : IEntityTypeConfiguration<Warehouse_StockItemStockGroup>
    {
        public void Configure(EntityTypeBuilder<Warehouse_StockItemStockGroup> builder)
        {
            builder.ToTable("StockItemStockGroups", "Warehouse");
            builder.HasKey(x => x.StockItemStockGroupId).HasName("PK_Warehouse_StockItemStockGroups").IsClustered();

            builder.Property(x => x.StockItemStockGroupId).HasColumnName(@"StockItemStockGroupID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[StockItemStockGroupID]");
            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StockGroupId).HasColumnName(@"StockGroupID").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_StockItemStockGroups).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemStockGroups_Application_People");
            builder.HasOne(a => a.Warehouse_StockGroup).WithMany(b => b.Warehouse_StockItemStockGroups).HasForeignKey(c => c.StockGroupId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemStockGroups_StockGroupID_Warehouse_StockGroups");
            builder.HasOne(a => a.Warehouse_StockItem).WithMany(b => b.Warehouse_StockItemStockGroups).HasForeignKey(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemStockGroups_StockItemID_Warehouse_StockItems");

            builder.HasIndex(x => new { x.StockGroupId, x.StockItemId }).HasDatabaseName("UQ_StockItemStockGroups_StockGroupID_Lookup").IsUnique();
            builder.HasIndex(x => new { x.StockItemId, x.StockGroupId }).HasDatabaseName("UQ_StockItemStockGroups_StockItemID_Lookup").IsUnique();
        }
    }

    // StockItemTransactions
    public class Warehouse_StockItemTransactionConfiguration : IEntityTypeConfiguration<Warehouse_StockItemTransaction>
    {
        public void Configure(EntityTypeBuilder<Warehouse_StockItemTransaction> builder)
        {
            builder.ToTable("StockItemTransactions", "Warehouse");
            builder.HasKey(x => x.StockItemTransactionId).HasName("PK_Warehouse_StockItemTransactions");

            builder.Property(x => x.StockItemTransactionId).HasColumnName(@"StockItemTransactionID").HasColumnType("int").IsRequired().HasDefaultValueSql(@"NEXT VALUE FOR [Sequences].[TransactionID]");
            builder.Property(x => x.StockItemId).HasColumnName(@"StockItemID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TransactionTypeId).HasColumnName(@"TransactionTypeID").HasColumnType("int").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.TransactionOccurredWhen).HasColumnName(@"TransactionOccurredWhen").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("decimal(18,3)").IsRequired();
            builder.Property(x => x.LastEditedBy).HasColumnName(@"LastEditedBy").HasColumnType("int").IsRequired();
            builder.Property(x => x.LastEditedWhen).HasColumnName(@"LastEditedWhen").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Application_Person).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.LastEditedBy).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_Application_People");
            builder.HasOne(a => a.Application_TransactionType).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.TransactionTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_TransactionTypeID_Application_TransactionTypes");
            builder.HasOne(a => a.Purchasing_PurchaseOrder).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.PurchaseOrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_PurchaseOrderID_Purchasing_PurchaseOrders");
            builder.HasOne(a => a.Purchasing_Supplier).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.SupplierId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_SupplierID_Purchasing_Suppliers");
            builder.HasOne(a => a.Sales_Customer).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_CustomerID_Sales_Customers");
            builder.HasOne(a => a.Sales_Invoice).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.InvoiceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_InvoiceID_Sales_Invoices");
            builder.HasOne(a => a.Warehouse_StockItem).WithMany(b => b.Warehouse_StockItemTransactions).HasForeignKey(c => c.StockItemId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Warehouse_StockItemTransactions_StockItemID_Warehouse_StockItems");

            builder.HasIndex(x => x.CustomerId).HasDatabaseName("FK_Warehouse_StockItemTransactions_CustomerID");
            builder.HasIndex(x => x.InvoiceId).HasDatabaseName("FK_Warehouse_StockItemTransactions_InvoiceID");
            builder.HasIndex(x => x.PurchaseOrderId).HasDatabaseName("FK_Warehouse_StockItemTransactions_PurchaseOrderID");
            builder.HasIndex(x => x.StockItemId).HasDatabaseName("FK_Warehouse_StockItemTransactions_StockItemID");
            builder.HasIndex(x => x.SupplierId).HasDatabaseName("FK_Warehouse_StockItemTransactions_SupplierID");
            builder.HasIndex(x => x.TransactionTypeId).HasDatabaseName("FK_Warehouse_StockItemTransactions_TransactionTypeID");
        }
    }

    // VehicleTemperatures
    public class Warehouse_VehicleTemperatureConfiguration : IEntityTypeConfiguration<Warehouse_VehicleTemperature>
    {
        public void Configure(EntityTypeBuilder<Warehouse_VehicleTemperature> builder)
        {
            builder.ToTable("VehicleTemperatures", "Warehouse");
            builder.HasKey(x => x.VehicleTemperatureId).HasName("PK_Warehouse_VehicleTemperatures");

            builder.Property(x => x.VehicleTemperatureId).HasColumnName(@"VehicleTemperatureID").HasColumnType("bigint").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.VehicleRegistration).HasColumnName(@"VehicleRegistration").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.ChillerSensorNumber).HasColumnName(@"ChillerSensorNumber").HasColumnType("int").IsRequired();
            builder.Property(x => x.RecordedWhen).HasColumnName(@"RecordedWhen").HasColumnType("datetime2").IsRequired();
            builder.Property(x => x.Temperature).HasColumnName(@"Temperature").HasColumnType("decimal(10,2)").IsRequired();
            builder.Property(x => x.FullSensorData).HasColumnName(@"FullSensorData").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.IsCompressed).HasColumnName(@"IsCompressed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.CompressedSensorData).HasColumnName(@"CompressedSensorData").HasColumnType("varbinary(max)").IsRequired(false);
        }
    }


    #endregion

}
// </auto-generated>
